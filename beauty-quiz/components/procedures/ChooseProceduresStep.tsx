'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useQuizStore } from '@/store/quizStore'
import Image from 'next/image'

// –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏
const iconEmojis = {
  cleanseAndHydrate: 'üß¥',
  deepHydration: 'üíß',
  exfoliate: '‚ú®',
  faceMassage: 'üíÜ‚Äç‚ôÄÔ∏è',
  lipEyeCare: 'üëÅÔ∏è',
  spfProtection: '‚òÄÔ∏è',
  washCare: 'üßº',
  deepNourishment: 'üåø',
  scalpDetox: 'üßΩ',
  heatProtection: 'üî•',
  scalpMassage: 'üíÜ‚Äç‚ôÇÔ∏è',
  trimSplitEnds: '‚úÇÔ∏è',
  postColorCare: 'üé®',
  morningStretch: 'üåÖ',
  cardioBoost: 'üí™',
  strengthTraining: 'üèãÔ∏è‚Äç‚ôÄÔ∏è',
  yogaFlexibility: 'üßò‚Äç‚ôÄÔ∏è',
  danceItOut: 'üíÉ',
  swimmingTime: 'üèä‚Äç‚ôÄÔ∏è',
  cycling: 'üö¥‚Äç‚ôÄÔ∏è',
  postureFix: 'üìê',
  eveningStretch: 'üåô',
  mindfulMeditation: 'üßò‚Äç‚ôÇÔ∏è',
  breathingExercises: 'ü´Å',
  gratitudeJournal: 'üìù',
  moodCheckIn: 'üòä',
  learnGrow: 'üìö',
  socialMediaDetox: 'üì±',
  positiveAffirmations: 'üí≠',
  talkItOut: 'üó£Ô∏è',
  stressRelief: 'üòå',
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–∑ Tailwind –∫–ª–∞—Å—Å–∞ –∏–ª–∏ HEX —Å—Ç—Ä–æ–∫–∏
const extractColorFromClass = (colorClass: string): string => {
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ HEX —Å—Ç—Ä–æ–∫–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
  if (colorClass.startsWith('#')) {
    return colorClass
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ Tailwind –∫–ª–∞—Å—Å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  if (colorClass.startsWith('bg-[')) {
    return colorClass.match(/bg-\[([^\]]+)\]/)?.[1] || '#A385E9'
  }
  
  return colorClass
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è RGBA —Ü–≤–µ—Ç–∞ –∏–∑ Tailwind –∫–ª–∞—Å—Å–∞ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏
const extractRgbaFromClass = (bgColorClass: string): string => {
  // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ RGBA —Å—Ç—Ä–æ–∫–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
  if (bgColorClass.startsWith('rgba(')) {
    return bgColorClass
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ Tailwind –∫–ª–∞—Å—Å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  if (bgColorClass.startsWith('bg-[rgba(')) {
    const match = bgColorClass.match(/bg-\[rgba\(([^)]+)\)\]/)
    if (match) {
      return `rgba(${match[1]})`
    }
  }
  
  return 'rgba(163, 133, 233, 0.2)' // fallback
}

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
const ActivityIcon = ({ icon, color }: { icon: string; color: string }) => {
  console.log('ActivityIcon received color:', color)
  
  const backgroundColor = extractColorFromClass(color)
    
  return (
    <div 
      className="w-12 h-12 rounded-full flex items-center justify-center text-2xl"
      style={{ backgroundColor }}
    >
      {icon}
    </div>
  )
}

  // –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏–∑ Figma
  const initialActivities = {
    skin: [
      { id: 'cleanse-hydrate', name: 'Cleanse & Hydrate', icon: iconEmojis.cleanseAndHydrate, color: 'bg-[#0080FF]', bgColor: 'bg-[rgba(0,128,255,0.2)]', aiRecommended: true },
      { id: 'deep-hydration', name: 'Deep Hydration', icon: iconEmojis.deepHydration, color: 'bg-[#FF001D]', bgColor: 'bg-[rgba(255,0,29,0.2)]', aiRecommended: false },
      { id: 'exfoliate', name: 'Exfoliate', icon: iconEmojis.exfoliate, color: 'bg-[#F7FF00]', bgColor: 'bg-[rgba(246,255,0,0.2)]', aiRecommended: true },
      { id: 'face-massage', name: 'Face Massage', icon: iconEmojis.faceMassage, color: 'bg-[#B3FF00]', bgColor: 'bg-[rgba(178,255,0,0.2)]', aiRecommended: false },
      { id: 'lip-eye-care', name: 'Lip & Eye Care', icon: iconEmojis.lipEyeCare, color: 'bg-[#2BFF00]', bgColor: 'bg-[rgba(42,255,0,0.2)]', aiRecommended: true },
      { id: 'spf-protection', name: 'SPF Protection', icon: iconEmojis.spfProtection, color: 'bg-[#00FFA6]', bgColor: 'bg-[rgba(0,255,166,0.2)]', aiRecommended: false },
    ],
    hair: [
      { id: 'wash-care', name: 'Wash & Care', icon: iconEmojis.washCare, color: 'bg-[#00FFFF]', bgColor: 'bg-[rgba(0,255,255,0.2)]', aiRecommended: false },
      { id: 'deep-nourishment', name: 'Deep Nourishment', icon: iconEmojis.deepNourishment, color: 'bg-[#4D00FF]', bgColor: 'bg-[rgba(76,0,255,0.2)]', aiRecommended: true },
      { id: 'scalp-detox', name: 'Scalp Detox', icon: iconEmojis.scalpDetox, color: 'bg-[#EA00FF]', bgColor: 'bg-[rgba(234,0,255,0.2)]', aiRecommended: false },
      { id: 'heat-protection', name: 'Heat Protection', icon: iconEmojis.heatProtection, color: 'bg-[#FF007B]', bgColor: 'bg-[rgba(255,0,123,0.2)]', aiRecommended: true },
      { id: 'scalp-massage', name: 'Scalp Massage', icon: iconEmojis.scalpMassage, color: 'bg-[#FF2600]', bgColor: 'bg-[rgba(255,38,0,0.2)]', aiRecommended: false },
      { id: 'trim-split-ends', name: 'Trim Split Ends', icon: iconEmojis.trimSplitEnds, color: 'bg-[#FFBB00]', bgColor: 'bg-[rgba(255,187,0,0.2)]', aiRecommended: true },
      { id: 'post-color-care', name: 'Post-Color Care', icon: iconEmojis.postColorCare, color: 'bg-[#D9FF00]', bgColor: 'bg-[rgba(217,255,0,0.2)]', aiRecommended: false },
    ],
    physical: [
      { id: 'morning-stretch', name: 'Morning Stretch', icon: iconEmojis.morningStretch, color: 'bg-[#0080FF]', bgColor: 'bg-[rgba(0,128,255,0.2)]', aiRecommended: true },
      { id: 'cardio-boost', name: 'Cardio Boost', icon: iconEmojis.cardioBoost, color: 'bg-[#2600FF]', bgColor: 'bg-[rgba(38,0,255,0.2)]', aiRecommended: false },
      { id: 'strength-training', name: 'Strength Training', icon: iconEmojis.strengthTraining, color: 'bg-[#5F00FF]', bgColor: 'bg-[rgba(95,0,255,0.2)]', aiRecommended: true },
      { id: 'yoga-flexibility', name: 'Yoga & Flexibility', icon: iconEmojis.yogaFlexibility, color: 'bg-[#FF00E6]', bgColor: 'bg-[rgba(255,0,230,0.2)]', aiRecommended: false },
      { id: 'dance-it-out', name: 'Dance It Out', icon: iconEmojis.danceItOut, color: 'bg-[#00FFFD]', bgColor: 'bg-[rgba(0,255,253,0.2)]', aiRecommended: true },
      { id: 'swimming-time', name: 'Swimming Time', icon: iconEmojis.swimmingTime, color: 'bg-[#8CFF00]', bgColor: 'bg-[rgba(140,255,0,0.2)]', aiRecommended: false },
      { id: 'cycling', name: 'Cycling', icon: iconEmojis.cycling, color: 'bg-[#BCFF00]', bgColor: 'bg-[rgba(188,255,0,0.2)]', aiRecommended: true },
      { id: 'posture-fix', name: 'Posture Fix', icon: iconEmojis.postureFix, color: 'bg-[#F1FF00]', bgColor: 'bg-[rgba(241,255,0,0.2)]', aiRecommended: false },
      { id: 'evening-stretch', name: 'Evening Stretch', icon: iconEmojis.eveningStretch, color: 'bg-[#FF7200]', bgColor: 'bg-[rgba(255,114,0,0.2)]', aiRecommended: true },
    ],
    mental: [
      { id: 'mindful-meditation', name: 'Mindful Meditation', icon: iconEmojis.mindfulMeditation, color: 'bg-[#D0FF00]', bgColor: 'bg-[rgba(208,255,0,0.2)]', aiRecommended: true },
      { id: 'breathing-exercises', name: 'Breathing Exercises', icon: iconEmojis.breathingExercises, color: 'bg-[#00AAFF]', bgColor: 'bg-[rgba(0,170,255,0.2)]', aiRecommended: false },
      { id: 'gratitude-exercises', name: 'Gratitude Exercises', icon: iconEmojis.gratitudeJournal, color: 'bg-[#77FF00]', bgColor: 'bg-[rgba(119,255,0,0.2)]', aiRecommended: true },
      { id: 'mood-check-in', name: 'Mood Check-In', icon: iconEmojis.moodCheckIn, color: 'bg-[#FFAE00]', bgColor: 'bg-[rgba(255,174,0,0.2)]', aiRecommended: false },
      { id: 'learn-grow', name: 'Learn & Grow', icon: iconEmojis.learnGrow, color: 'bg-[#35FC77]', bgColor: 'bg-[rgba(53,252,119,0.2)]', aiRecommended: true },
      { id: 'social-media-detox', name: 'Social Media Detox', icon: iconEmojis.socialMediaDetox, color: 'bg-[#2CBFB8]', bgColor: 'bg-[rgba(44,191,184,0.2)]', aiRecommended: false },
      { id: 'positive-affirmations', name: 'Positive Affirmations', icon: iconEmojis.positiveAffirmations, color: 'bg-[#622CBF]', bgColor: 'bg-[rgba(98,44,191,0.2)]', aiRecommended: true },
      { id: 'talk-it-out', name: 'Talk It Out', icon: iconEmojis.talkItOut, color: 'bg-[#BF2C4C]', bgColor: 'bg-[rgba(191,44,76,0.2)]', aiRecommended: false },
      { id: 'stress-relief', name: 'Stress Relief', icon: iconEmojis.stressRelief, color: 'bg-[#FC356D]', bgColor: 'bg-[rgba(252,53,109,0.2)]', aiRecommended: true },
    ],
  }

export default function ChooseProceduresStep() {
  const router = useRouter()
  const { setAnswer } = useQuizStore()
  const [selectedActivities, setSelectedActivities] = useState<string[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [isPromptModalOpen, setIsPromptModalOpen] = useState(false)
  const [promptText, setPromptText] = useState('')
  const [selectedTemplates, setSelectedTemplates] = useState<string[]>([])
  const [isCreateActivityModalOpen, setIsCreateActivityModalOpen] = useState(false)
  const [isColorPickerOpen, setIsColorPickerOpen] = useState(false)
  const [isIconPickerOpen, setIsIconPickerOpen] = useState(false)
  const [isDragging, setIsDragging] = useState(false)
  const [iconSearchQuery, setIconSearchQuery] = useState('')
  const [activities, setActivities] = useState(initialActivities)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [isCreateCategoryModalOpen, setIsCreateCategoryModalOpen] = useState(false)
  const [newCategory, setNewCategory] = useState({
    name: '',
    color: '',
    icon: ''
  })
  
  const [newActivity, setNewActivity] = useState({
    name: '',
    note: '',
    category: '',
    color: '',
    icon: ''
  })
  
  const [activityErrors, setActivityErrors] = useState({
    name: '',
    category: '',
    color: '',
    icon: ''
  })

  // –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
  const templates = [
    { id: 'morning-routine', name: 'Morning Routine', description: 'Cleanse, moisturize, SPF protection' },
    { id: 'evening-routine', name: 'Evening Routine', description: 'Deep cleanse, exfoliate, night cream' },
    { id: 'weekly-treatment', name: 'Weekly Treatment', description: 'Face mask, deep hydration, massage' },
    { id: 'hair-care', name: 'Hair Care', description: 'Wash, condition, heat protection, styling' },
    { id: 'fitness', name: 'Fitness Plan', description: 'Cardio, strength training, yoga, stretching' },
    { id: 'wellness', name: 'Wellness', description: 'Meditation, breathing exercises, gratitude' },
    { id: 'skincare-intensive', name: 'Intensive Skincare', description: 'Serums, treatments, professional care' },
    { id: 'hair-treatment', name: 'Hair Treatment', description: 'Deep conditioning, scalp care, styling' },
    { id: 'body-care', name: 'Body Care', description: 'Exfoliation, moisturizing, massage' },
    { id: 'mental-health', name: 'Mental Health', description: 'Therapy, journaling, mindfulness' },
    { id: 'nutrition', name: 'Nutrition Plan', description: 'Healthy eating, supplements, hydration' },
    { id: 'sleep-routine', name: 'Sleep Routine', description: 'Wind down, relaxation, quality sleep' },
    { id: 'workout-beginner', name: 'Beginner Workout', description: 'Light exercises, walking, basic stretches' },
    { id: 'workout-advanced', name: 'Advanced Workout', description: 'Intense training, HIIT, weightlifting' },
    { id: 'beauty-maintenance', name: 'Beauty Maintenance', description: 'Nails, eyebrows, hair trimming' },
    { id: 'stress-management', name: 'Stress Management', description: 'Breathing, meditation, relaxation' },
  ]

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [categories, setCategories] = useState([
    'Skin', 'Hair', 'Physical health', 'Mental Wellness'
  ])

  const colors = [
    { id: 'red', value: '#FF6B6B', name: 'Red' },
    { id: 'teal', value: '#4ECDC4', name: 'Teal' },
    { id: 'blue', value: '#45B7D1', name: 'Blue' },
    { id: 'green', value: '#96CEB4', name: 'Green' },
    { id: 'purple', value: '#A385E9', name: 'Purple' },
    { id: 'orange', value: '#FFB347', name: 'Orange' },
    { id: 'pink', value: '#FFB6C1', name: 'Pink' },
    { id: 'yellow', value: '#FFEAA7', name: 'Yellow' }
  ]

  const icons = [
    { id: 'checklist', name: 'Checklist', icon: '‚úì' },
    { id: 'briefcase', name: 'Work', icon: 'üíº' },
    { id: 'meditation', name: 'Meditation', icon: 'üßò' },
    { id: 'basketball', name: 'Sports', icon: 'üèÄ' },
    { id: 'heart', name: 'Health', icon: '‚ù§Ô∏è' },
    { id: 'star', name: 'Star', icon: '‚≠ê' },
    { id: 'book', name: 'Learning', icon: 'üìö' },
    { id: 'music', name: 'Music', icon: 'üéµ' }
  ]


  // –ü—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
  const availableIcons = ['üß¥', 'üíß', '‚ú®', 'üíÜ‚Äç‚ôÄÔ∏è', 'üëÅÔ∏è', '‚òÄÔ∏è', 'üßº', 'üåø', 'üßΩ', 'üî•', 'üíÜ‚Äç‚ôÇÔ∏è', '‚úÇÔ∏è', 'üé®', 'üåÖ', 'üí™', 'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'üßò‚Äç‚ôÄÔ∏è', 'üíÉ', 'üèä‚Äç‚ôÄÔ∏è', 'üö¥‚Äç‚ôÄÔ∏è', 'üìê', 'üåô', 'üßò‚Äç‚ôÇÔ∏è', 'ü´Å', 'üìù', 'üòä', 'üìö', 'üì±', 'üí≠', 'üó£Ô∏è', 'üòå', 'üéµ', 'üé®', 'üé≠', 'üé™', 'üéØ', 'üé≤', 'üé≥', 'üé∏', 'üéπ', 'üé∫', 'üéª', 'üéº', 'üéΩ', 'üéæ', 'üéø', 'üèÄ', 'üèÅ', 'üèÇ', 'üèÉ', 'üèÑ', 'üèÖ', 'üèÜ', 'üèá', 'üèà', 'üèâ', 'üèä', 'üèãÔ∏è', 'üèåÔ∏è', 'üèçÔ∏è', 'üèéÔ∏è', 'üèè', 'üèê', 'üèë', 'üèí', 'üèì', 'üèîÔ∏è', 'üèïÔ∏è', 'üèñÔ∏è', 'üèóÔ∏è', 'üèòÔ∏è', 'üèôÔ∏è', 'üèöÔ∏è', 'üèõÔ∏è', 'üèúÔ∏è', 'üèùÔ∏è', 'üèûÔ∏è', 'üèüÔ∏è', 'üè†', 'üè°', 'üè¢', 'üè£', 'üè§', 'üè•', 'üè¶', 'üèß', 'üè®', 'üè©', 'üè™', 'üè´', 'üè¨', 'üè≠', 'üèÆ', 'üèØ', 'üè∞', 'üè±', 'üè≤', 'üè≥Ô∏è', 'üè¥', 'üèµÔ∏è', 'üè∂', 'üè∑Ô∏è', 'üè∏', 'üèπ', 'üè∫', 'üèª', 'üèº', 'üèΩ', 'üèæ', 'üèø', 'üêÄ', 'üêÅ', 'üêÇ', 'üêÉ', 'üêÑ', 'üêÖ', 'üêÜ', 'üêá', 'üêà', 'üêâ', 'üêä', 'üêã', 'üêå', 'üêç', 'üêé', 'üêè', 'üêê', 'üêë', 'üêí', 'üêì', 'üêî', 'üêï', 'üêñ', 'üêó', 'üêò', 'üêô', 'üêö', 'üêõ', 'üêú', 'üêù', 'üêû', 'üêü', 'üê†', 'üê°', 'üê¢', 'üê£', 'üê§', 'üê•', 'üê¶', 'üêß', 'üê®', 'üê©', 'üê™', 'üê´', 'üê¨', 'üê≠', 'üêÆ', 'üêØ', 'üê∞', 'üê±', 'üê≤', 'üê≥', 'üê¥', 'üêµ', 'üê∂', 'üê∑', 'üê∏', 'üêπ', 'üê∫', 'üêª', 'üêº', 'üêΩ', 'üêæ', 'üêøÔ∏è', 'üëÄ', 'üëÅÔ∏è', 'üëÇ', 'üëÉ', 'üëÑ', 'üëÖ', 'üëÜ', 'üëá', 'üëà', 'üëâ', 'üëä', 'üëã', 'üëå', 'üëç', 'üëé', 'üëè', 'üëê', 'üëë', 'üëí', 'üëì', 'üëî', 'üëï', 'üëñ', 'üëó', 'üëò', 'üëô', 'üëö', 'üëõ', 'üëú', 'üëù', 'üëû', 'üëü', 'üë†', 'üë°', 'üë¢', 'üë£', 'üë§', 'üë•', 'üë¶', 'üëß', 'üë®', 'üë©', 'üë™', 'üë´', 'üë¨', 'üë≠', 'üëÆ', 'üëØ', 'üë∞', 'üë±', 'üë≤', 'üë≥', 'üë¥', 'üëµ', 'üë∂', 'üë∑', 'üë∏', 'üëπ', 'üë∫', 'üëª', 'üëº', 'üëΩ', 'üëæ', 'üëø', 'üíÄ', 'üíÅ', 'üíÇ', 'üíÉ', 'üíÑ', 'üíÖ', 'üíÜ', 'üíá', 'üíà', 'üíâ', 'üíä', 'üíã', 'üíå', 'üíç', 'üíé', 'üíè', 'üíê', 'üíë', 'üíí', 'üíì', 'üíî', 'üíï', 'üíñ', 'üíó', 'üíò', 'üíô', 'üíö', 'üíõ', 'üíú', 'üíù', 'üíû', 'üíü', 'üí†', 'üí°', 'üí¢', 'üí£', 'üí§', 'üí•', 'üí¶', 'üíß', 'üí®', 'üí©', 'üí™', 'üí´', 'üí¨', 'üí≠', 'üíÆ', 'üíØ', 'üí∞', 'üí±', 'üí≤', 'üí≥', 'üí¥', 'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üíπ', 'üí∫', 'üíª', 'üíº', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìÅ', 'üìÇ', 'üìÉ', 'üìÑ', 'üìÖ', 'üìÜ', 'üìá', 'üìà', 'üìâ', 'üìä', 'üìã', 'üìå', 'üìç', 'üìé', 'üìè', 'üìê', 'üìë', 'üìí', 'üìì', 'üìî', 'üìï', 'üìñ', 'üìó', 'üìò', 'üìô', 'üìö', 'üìõ', 'üìú', 'üìù', 'üìû', 'üìü', 'üì†', 'üì°', 'üì¢', 'üì£', 'üì§', 'üì•', 'üì¶', 'üìß', 'üì®', 'üì©', 'üì™', 'üì´', 'üì¨', 'üì≠', 'üìÆ', 'üìØ', 'üì∞', 'üì±', 'üì≤', 'üì≥', 'üì¥', 'üìµ', 'üì∂', 'üì∑', 'üì∏', 'üìπ', 'üì∫', 'üìª', 'üìº', 'üìΩÔ∏è', 'üìæ', 'üìø', 'üîÄ', 'üîÅ', 'üîÇ', 'üîÉ', 'üîÑ', 'üîÖ', 'üîÜ', 'üîá', 'üîà', 'üîâ', 'üîä', 'üîã', 'üîå', 'üîç', 'üîé', 'üîè', 'üîê', 'üîë', 'üîí', 'üîì', 'üîî', 'üîï', 'üîñ', 'üîó', 'üîò', 'üîô', 'üîö', 'üîõ', 'üîú', 'üîù', 'üîû', 'üîü', 'üî†', 'üî°', 'üî¢', 'üî£', 'üî§', 'üî•', 'üî¶', 'üîß', 'üî®', 'üî©', 'üî™', 'üî´', 'üî¨', 'üî≠', 'üîÆ', 'üîØ', 'üî∞', 'üî±', 'üî≤', 'üî≥', 'üî¥', 'üîµ', 'üî∂', 'üî∑', 'üî∏', 'üîπ', 'üî∫', 'üîª', 'üîº', 'üîΩ', 'üïê', 'üïë', 'üïí', 'üïì', 'üïî', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô', 'üïö', 'üïõ', 'üïú', 'üïù', 'üïû', 'üïü', 'üï†', 'üï°', 'üï¢', 'üï£', 'üï§', 'üï•', 'üï¶', 'üïß', 'üï∞Ô∏è', 'üï±', 'üï≤', 'üï≥Ô∏è', 'üï¥Ô∏è', 'üïµÔ∏è', 'üï∂Ô∏è', 'üï∑Ô∏è', 'üï∏Ô∏è', 'üïπÔ∏è', 'üï∫', 'üñÄ', 'üñÅ', 'üñÇ', 'üñÉ', 'üñÑ', 'üñÖ', 'üñÜ', 'üñáÔ∏è', 'üñà', 'üñâ', 'üñäÔ∏è', 'üñãÔ∏è', 'üñåÔ∏è', 'üñçÔ∏è', 'üñé', 'üñè', 'üñêÔ∏è', 'üñë', 'üñí', 'üñì', 'üñî', 'üñï', 'üññ', 'üñó', 'üñò', 'üñô', 'üñö', 'üñõ', 'üñú', 'üñù', 'üñû', 'üñü', 'üñ†', 'üñ°', 'üñ¢', 'üñ£', 'üñ§', 'üñ•Ô∏è', 'üñ¶', 'üñß', 'üñ®Ô∏è', 'üñ©', 'üñ™', 'üñ´', 'üñ¨', 'üñ≠', 'üñÆ', 'üñØ', 'üñ∞', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üñ≥', 'üñ¥', 'üñµ', 'üñ∂', 'üñ∑', 'üñ∏', 'üñπ', 'üñ∫', 'üñª', 'üñºÔ∏è', 'üñΩ', 'üñæ', 'üñø', 'üóÄ', 'üóÅ', 'üóÇÔ∏è', 'üóÉÔ∏è', 'üóÑÔ∏è', 'üóÖ', 'üóÜ', 'üóá', 'üóà', 'üóâ', 'üóä', 'üóã', 'üóå', 'üóç', 'üóé', 'üóè', 'üóê', 'üóëÔ∏è', 'üóíÔ∏è', 'üóìÔ∏è', 'üóî', 'üóï', 'üóñ', 'üóó', 'üóò', 'üóô', 'üóö', 'üóõ', 'üóúÔ∏è', 'üóùÔ∏è', 'üóûÔ∏è', 'üóü', 'üó†', 'üó°Ô∏è', 'üó¢', 'üó£Ô∏è', 'üó§', 'üó•', 'üó¶', 'üóß', 'üó®Ô∏è', 'üó©', 'üó™', 'üó´', 'üó¨', 'üó≠', 'üóÆ', 'üóØÔ∏è', 'üó∞', 'üó±', 'üó≤', 'üó≥Ô∏è', 'üó¥', 'üóµ', 'üó∂', 'üó∑', 'üó∏', 'üóπ', 'üó∫Ô∏è', 'üóª', 'üóº', 'üóΩ', 'üóæ', 'üóø', 'üòÄ', 'üòÅ', 'üòÇ', 'üòÉ', 'üòÑ', 'üòÖ', 'üòÜ', 'üòá', 'üòà', 'üòâ', 'üòä', 'üòã', 'üòå', 'üòç', 'üòé', 'üòè', 'üòê', 'üòë', 'üòí', 'üòì', 'üòî', 'üòï', 'üòñ', 'üòó', 'üòò', 'üòô', 'üòö', 'üòõ', 'üòú', 'üòù', 'üòû', 'üòü', 'üò†', 'üò°', 'üò¢', 'üò£', 'üò§', 'üò•', 'üò¶', 'üòß', 'üò®', 'üò©', 'üò™', 'üò´', 'üò¨', 'üò≠', 'üòÆ', 'üòØ', 'üò∞', 'üò±', 'üò≤', 'üò≥', 'üò¥', 'üòµ', 'üò∂', 'üò∑', 'üò∏', 'üòπ', 'üò∫', 'üòª', 'üòº', 'üòΩ', 'üòæ', 'üòø', 'üôÄ', 'üôÅ', 'üôÇ', 'üôÉ', 'üôÑ', 'üôÖ', 'üôÜ', 'üôá', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôå', 'üôç', 'üôé', 'üôè', 'üôê', 'üôë', 'üôí', 'üôì', 'üôî', 'üôï', 'üôñ', 'üôó', 'üôò', 'üôô', 'üôö', 'üôõ', 'üôú', 'üôù', 'üôû', 'üôü', 'üô†', 'üô°', 'üô¢', 'üô£', 'üô§', 'üô•', 'üô¶', 'üôß', 'üô®', 'üô©', 'üô™', 'üô´', 'üô¨', 'üô≠', 'üôÆ', 'üôØ', 'üô∞', 'üô±', 'üô≤', 'üô≥', 'üô¥', 'üôµ', 'üô∂', 'üô∑', 'üô∏', 'üôπ', 'üô∫', 'üôª', 'üôº', 'üôΩ', 'üôæ', 'üôø', 'üöÄ', 'üöÅ', 'üöÇ', 'üöÉ', 'üöÑ', 'üöÖ', 'üöÜ', 'üöá', 'üöà', 'üöâ', 'üöä', 'üöã', 'üöå', 'üöç', 'üöé', 'üöè', 'üöê', 'üöë', 'üöí', 'üöì', 'üöî', 'üöï', 'üöñ', 'üöó', 'üöò', 'üöô', 'üöö', 'üöõ', 'üöú', 'üöù', 'üöû', 'üöü', 'üö†', 'üö°', 'üö¢', 'üö£', 'üö§', 'üö•', 'üö¶', 'üöß', 'üö®', 'üö©', 'üö™', 'üö´', 'üö¨', 'üö≠', 'üöÆ', 'üöØ', 'üö∞', 'üö±', 'üö≤', 'üö≥', 'üö¥', 'üöµ', 'üö∂', 'üö∑', 'üö∏', 'üöπ', 'üö∫', 'üöª', 'üöº', 'üöΩ', 'üöæ', 'üöø', 'üõÄ', 'üõÅ', 'üõÇ', 'üõÉ', 'üõÑ', 'üõÖ', 'üõÜ', 'üõá', 'üõà', 'üõâ', 'üõä', 'üõãÔ∏è', 'üõå', 'üõçÔ∏è', 'üõéÔ∏è', 'üõèÔ∏è', 'üõê', 'üõë', 'üõí', 'üõì', 'üõî', 'üõï', 'üõñ', 'üõó', 'üõò', 'üõô', 'üõö', 'üõõ', 'üõú', 'üõù', 'üõû', 'üõü', 'üõ†Ô∏è', 'üõ°Ô∏è', 'üõ¢Ô∏è', 'üõ£Ô∏è', 'üõ§Ô∏è', 'üõ•Ô∏è', 'üõ¶', 'üõß', 'üõ®', 'üõ©Ô∏è', 'üõ™', 'üõ´', 'üõ¨', 'üõ≠', 'üõÆ', 'üõØ', 'üõ∞Ô∏è', 'üõ±Ô∏è', 'üõ≤', 'üõ≥Ô∏è', 'üõ¥', 'üõµ', 'üõ∂', 'üõ∑', 'üõ∏', 'üõπ', 'üõ∫', 'üõª', 'üõº', 'üõΩ', 'üõæ', 'üõø', 'üúÄ', 'üúÅ', 'üúÇ', 'üúÉ', 'üúÑ', 'üúÖ', 'üúÜ', 'üúá', 'üúà', 'üúâ', 'üúä', 'üúã', 'üúå', 'üúç', 'üúé', 'üúè', 'üúê', 'üúë', 'üúí', 'üúì', 'üúî', 'üúï', 'üúñ', 'üúó', 'üúò', 'üúô', 'üúö', 'üúõ', 'üúú', 'üúù', 'üúû', 'üúü', 'üú†', 'üú°', 'üú¢', 'üú£', 'üú§', 'üú•', 'üú¶', 'üúß', 'üú®', 'üú©', 'üú™', 'üú´', 'üú¨', 'üú≠', 'üúÆ', 'üúØ', 'üú∞', 'üú±', 'üú≤', 'üú≥', 'üú¥', 'üúµ', 'üú∂', 'üú∑', 'üú∏', 'üúπ', 'üú∫', 'üúª', 'üúº', 'üúΩ', 'üúæ', 'üúø', 'üùÄ', 'üùÅ', 'üùÇ', 'üùÉ', 'üùÑ', 'üùÖ', 'üùÜ', 'üùá', 'üùà', 'üùâ', 'üùä', 'üùã', 'üùå', 'üùç', 'üùé', 'üùè', 'üùê', 'üùë', 'üùí', 'üùì', 'üùî', 'üùï', 'üùñ', 'üùó', 'üùò', 'üùô', 'üùö', 'üùõ', 'üùú', 'üùù', 'üùû', 'üùü', 'üù†', 'üù°', 'üù¢', 'üù£', 'üù§', 'üù•', 'üù¶', 'üùß', 'üù®', 'üù©', 'üù™', 'üù´', 'üù¨', 'üù≠', 'üùÆ', 'üùØ', 'üù∞', 'üù±', 'üù≤', 'üù≥']

  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∫–æ–Ω–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const iconsWithCategories = [
    // –°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å
    { icon: 'üí™', category: 'fitness', keywords: ['muscle', 'strength', 'gym', 'workout'] },
    { icon: 'üèãÔ∏è‚Äç‚ôÄÔ∏è', category: 'fitness', keywords: ['weight', 'lifting', 'gym', 'strength'] },
    { icon: 'üèÉ', category: 'fitness', keywords: ['running', 'jogging', 'cardio', 'exercise'] },
    { icon: 'üö¥‚Äç‚ôÄÔ∏è', category: 'fitness', keywords: ['cycling', 'bike', 'exercise', 'cardio'] },
    { icon: 'üèä‚Äç‚ôÄÔ∏è', category: 'fitness', keywords: ['swimming', 'pool', 'water', 'exercise'] },
    { icon: 'üßò‚Äç‚ôÄÔ∏è', category: 'wellness', keywords: ['yoga', 'meditation', 'mindfulness', 'relax'] },
    { icon: 'üßò‚Äç‚ôÇÔ∏è', category: 'wellness', keywords: ['yoga', 'meditation', 'mindfulness', 'relax'] },
    { icon: 'üíÉ', category: 'fitness', keywords: ['dance', 'dancing', 'fun', 'exercise'] },
    
    // –ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥
    { icon: 'üß¥', category: 'beauty', keywords: ['bottle', 'lotion', 'cream', 'skincare'] },
    { icon: 'üíß', category: 'beauty', keywords: ['water', 'hydration', 'moisture', 'skincare'] },
    { icon: '‚ú®', category: 'beauty', keywords: ['sparkle', 'glitter', 'shine', 'beauty'] },
    { icon: 'üíÜ‚Äç‚ôÄÔ∏è', category: 'beauty', keywords: ['massage', 'spa', 'relax', 'beauty'] },
    { icon: 'üíÜ‚Äç‚ôÇÔ∏è', category: 'beauty', keywords: ['massage', 'spa', 'relax', 'beauty'] },
    { icon: 'üëÅÔ∏è', category: 'beauty', keywords: ['eye', 'vision', 'see', 'beauty'] },
    { icon: '‚òÄÔ∏è', category: 'beauty', keywords: ['sun', 'sunshine', 'uv', 'protection'] },
    { icon: 'üßº', category: 'beauty', keywords: ['soap', 'clean', 'wash', 'hygiene'] },
    { icon: 'üåø', category: 'beauty', keywords: ['plant', 'natural', 'green', 'organic'] },
    { icon: 'üßΩ', category: 'beauty', keywords: ['sponge', 'clean', 'wash', 'exfoliate'] },
    { icon: 'üî•', category: 'beauty', keywords: ['fire', 'heat', 'hot', 'warm'] },
    { icon: '‚úÇÔ∏è', category: 'beauty', keywords: ['scissors', 'cut', 'trim', 'hair'] },
    { icon: 'üé®', category: 'beauty', keywords: ['art', 'paint', 'color', 'creative'] },
    
    // –í—Ä–µ–º—è –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    { icon: 'üåÖ', category: 'time', keywords: ['sunrise', 'morning', 'dawn', 'early'] },
    { icon: 'üåô', category: 'time', keywords: ['moon', 'night', 'evening', 'sleep'] },
    { icon: 'üïê', category: 'time', keywords: ['clock', 'time', 'schedule', 'hour'] },
    { icon: 'üìÖ', category: 'time', keywords: ['calendar', 'date', 'schedule', 'plan'] },
    
    // –≠–º–æ—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    { icon: 'üòä', category: 'emotion', keywords: ['happy', 'smile', 'joy', 'positive'] },
    { icon: 'üòå', category: 'emotion', keywords: ['relaxed', 'calm', 'peaceful', 'zen'] },
    { icon: 'üí≠', category: 'emotion', keywords: ['thought', 'think', 'mind', 'idea'] },
    { icon: 'üó£Ô∏è', category: 'emotion', keywords: ['talk', 'speak', 'communication', 'voice'] },
    
    // –û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
    { icon: 'üìö', category: 'learning', keywords: ['book', 'study', 'learn', 'education'] },
    { icon: 'üìù', category: 'learning', keywords: ['note', 'write', 'journal', 'document'] },
    { icon: 'üéµ', category: 'learning', keywords: ['music', 'song', 'melody', 'sound'] },
    
    // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    { icon: 'üì±', category: 'tech', keywords: ['phone', 'mobile', 'device', 'technology'] },
    { icon: 'üíª', category: 'tech', keywords: ['computer', 'laptop', 'work', 'tech'] },
    
    // –ó–¥–æ—Ä–æ–≤—å–µ
    { icon: 'ü´Å', category: 'health', keywords: ['lungs', 'breathing', 'respiratory', 'health'] },
    { icon: '‚ù§Ô∏è', category: 'health', keywords: ['heart', 'love', 'health', 'cardio'] },
    
    // –î–æ–º –∏ –±—ã—Ç
    { icon: 'üè†', category: 'home', keywords: ['house', 'home', 'building', 'place'] },
    { icon: 'üõÅ', category: 'home', keywords: ['bathtub', 'bath', 'relax', 'home'] },
    
    // –ü—Ä–∏—Ä–æ–¥–∞
    { icon: 'üå±', category: 'nature', keywords: ['plant', 'grow', 'nature', 'green'] },
    { icon: 'üå∏', category: 'nature', keywords: ['flower', 'bloom', 'beautiful', 'nature'] },
    
    // –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏
    { icon: 'üçé', category: 'food', keywords: ['apple', 'fruit', 'healthy', 'food'] },
    { icon: 'ü•ó', category: 'food', keywords: ['salad', 'healthy', 'vegetables', 'food'] },
    { icon: 'üíß', category: 'food', keywords: ['water', 'drink', 'hydration', 'liquid'] },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞
    { icon: 'üèãÔ∏è', category: 'fitness', keywords: ['weight', 'lifting', 'gym', 'strength'] },
    { icon: 'ü§∏', category: 'fitness', keywords: ['gymnastics', 'flexibility', 'acrobatics', 'exercise'] },
    { icon: 'ü§æ', category: 'fitness', keywords: ['handball', 'team', 'sport', 'exercise'] },
    { icon: 'üèåÔ∏è', category: 'fitness', keywords: ['golf', 'sport', 'outdoor', 'leisure'] },
    { icon: 'üèÑ', category: 'fitness', keywords: ['surfing', 'water', 'ocean', 'sport'] },
    { icon: 'üèá', category: 'fitness', keywords: ['horse', 'riding', 'equestrian', 'sport'] },
    { icon: 'ü§Ω', category: 'fitness', keywords: ['water', 'polo', 'swimming', 'team'] },
    { icon: 'üèê', category: 'fitness', keywords: ['volleyball', 'team', 'sport', 'ball'] },
    { icon: 'üèë', category: 'fitness', keywords: ['hockey', 'stick', 'sport', 'team'] },
    { icon: 'üèí', category: 'fitness', keywords: ['ice', 'hockey', 'sport', 'winter'] },
    { icon: 'üèì', category: 'fitness', keywords: ['ping', 'pong', 'table', 'tennis'] },
    { icon: 'üè∏', category: 'fitness', keywords: ['badminton', 'racket', 'sport', 'shuttlecock'] },
    { icon: 'ü•ä', category: 'fitness', keywords: ['boxing', 'punch', 'fight', 'martial'] },
    { icon: 'ü•ã', category: 'fitness', keywords: ['martial', 'arts', 'karate', 'uniform'] },
    { icon: 'ü•Ö', category: 'fitness', keywords: ['goal', 'net', 'sport', 'hockey'] },
    { icon: '‚õ≥', category: 'fitness', keywords: ['golf', 'flag', 'hole', 'sport'] },
    { icon: '‚õ∑Ô∏è', category: 'fitness', keywords: ['skiing', 'winter', 'snow', 'sport'] },
    { icon: 'üèÇ', category: 'fitness', keywords: ['snowboard', 'winter', 'snow', 'sport'] },
    { icon: 'üõ∑', category: 'fitness', keywords: ['sled', 'sleigh', 'winter', 'snow'] },
    { icon: 'üõπ', category: 'fitness', keywords: ['skateboard', 'skate', 'wheels', 'sport'] },
    { icon: 'üõº', category: 'fitness', keywords: ['roller', 'skate', 'wheels', 'sport'] },
    { icon: 'üõ∫', category: 'fitness', keywords: ['auto', 'rickshaw', 'vehicle', 'transport'] },
    { icon: 'üõª', category: 'fitness', keywords: ['pickup', 'truck', 'vehicle', 'transport'] },
    { icon: 'üõº', category: 'fitness', keywords: ['roller', 'skate', 'wheels', 'sport'] },
    { icon: 'üõπ', category: 'fitness', keywords: ['skateboard', 'skate', 'wheels', 'sport'] },
    { icon: 'üõ∑', category: 'fitness', keywords: ['sled', 'sleigh', 'winter', 'snow'] },
    { icon: 'üèÇ', category: 'fitness', keywords: ['snowboard', 'winter', 'snow', 'sport'] },
    { icon: '‚õ∑Ô∏è', category: 'fitness', keywords: ['skiing', 'winter', 'snow', 'sport'] },
    { icon: '‚õ≥', category: 'fitness', keywords: ['golf', 'flag', 'hole', 'sport'] },
    { icon: 'ü•Ö', category: 'fitness', keywords: ['goal', 'net', 'sport', 'hockey'] },
    { icon: 'ü•ã', category: 'fitness', keywords: ['martial', 'arts', 'karate', 'uniform'] },
    { icon: 'ü•ä', category: 'fitness', keywords: ['boxing', 'punch', 'fight', 'martial'] },
    { icon: 'üè∏', category: 'fitness', keywords: ['badminton', 'racket', 'sport', 'shuttlecock'] },
    { icon: 'üèì', category: 'fitness', keywords: ['ping', 'pong', 'table', 'tennis'] },
    { icon: 'üèí', category: 'fitness', keywords: ['ice', 'hockey', 'sport', 'winter'] },
    { icon: 'üèë', category: 'fitness', keywords: ['hockey', 'stick', 'sport', 'team'] },
    { icon: 'üèê', category: 'fitness', keywords: ['volleyball', 'team', 'sport', 'ball'] },
    { icon: 'ü§Ω', category: 'fitness', keywords: ['water', 'polo', 'swimming', 'team'] },
    { icon: 'üèá', category: 'fitness', keywords: ['horse', 'riding', 'equestrian', 'sport'] },
    { icon: 'üèÑ', category: 'fitness', keywords: ['surfing', 'water', 'ocean', 'sport'] },
    { icon: 'üèåÔ∏è', category: 'fitness', keywords: ['golf', 'sport', 'outdoor', 'leisure'] },
    { icon: 'ü§æ', category: 'fitness', keywords: ['handball', 'team', 'sport', 'exercise'] },
    { icon: 'ü§∏', category: 'fitness', keywords: ['gymnastics', 'flexibility', 'acrobatics', 'exercise'] },
    { icon: 'üèãÔ∏è', category: 'fitness', keywords: ['weight', 'lifting', 'gym', 'strength'] },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã –∏ —É—Ö–æ–¥–∞
    { icon: 'üíÑ', category: 'beauty', keywords: ['lipstick', 'makeup', 'cosmetics', 'beauty'] },
    { icon: 'üíÖ', category: 'beauty', keywords: ['nail', 'polish', 'manicure', 'beauty'] },
    { icon: 'üíá', category: 'beauty', keywords: ['haircut', 'salon', 'hair', 'beauty'] },
    { icon: 'üíà', category: 'beauty', keywords: ['barber', 'pole', 'salon', 'hair'] },
    { icon: 'üíâ', category: 'beauty', keywords: ['syringe', 'injection', 'medical', 'beauty'] },
    { icon: 'üíä', category: 'beauty', keywords: ['pill', 'medicine', 'supplement', 'health'] },
    { icon: 'üíã', category: 'beauty', keywords: ['kiss', 'lips', 'love', 'beauty'] },
    { icon: 'üíå', category: 'beauty', keywords: ['love', 'letter', 'romance', 'heart'] },
    { icon: 'üíç', category: 'beauty', keywords: ['ring', 'jewelry', 'engagement', 'marriage'] },
    { icon: 'üíé', category: 'beauty', keywords: ['diamond', 'jewelry', 'luxury', 'beauty'] },
    { icon: 'üíè', category: 'beauty', keywords: ['couple', 'kiss', 'love', 'romance'] },
    { icon: 'üíê', category: 'beauty', keywords: ['bouquet', 'flowers', 'gift', 'beauty'] },
    { icon: 'üíë', category: 'beauty', keywords: ['couple', 'love', 'heart', 'romance'] },
    { icon: 'üíí', category: 'beauty', keywords: ['wedding', 'church', 'marriage', 'celebration'] },
    { icon: 'üíì', category: 'beauty', keywords: ['heartbeat', 'love', 'pulse', 'emotion'] },
    { icon: 'üíî', category: 'beauty', keywords: ['broken', 'heart', 'sad', 'love'] },
    { icon: 'üíï', category: 'beauty', keywords: ['two', 'hearts', 'love', 'romance'] },
    { icon: 'üíñ', category: 'beauty', keywords: ['sparkling', 'heart', 'love', 'beauty'] },
    { icon: 'üíó', category: 'beauty', keywords: ['growing', 'heart', 'love', 'emotion'] },
    { icon: 'üíò', category: 'beauty', keywords: ['cupid', 'arrow', 'love', 'romance'] },
    { icon: 'üíô', category: 'beauty', keywords: ['blue', 'heart', 'love', 'color'] },
    { icon: 'üíö', category: 'beauty', keywords: ['green', 'heart', 'love', 'nature'] },
    { icon: 'üíõ', category: 'beauty', keywords: ['yellow', 'heart', 'love', 'color'] },
    { icon: 'üíú', category: 'beauty', keywords: ['purple', 'heart', 'love', 'color'] },
    { icon: 'üíù', category: 'beauty', keywords: ['gift', 'heart', 'present', 'love'] },
    { icon: 'üíû', category: 'beauty', keywords: ['revolving', 'hearts', 'love', 'romance'] },
    { icon: 'üíü', category: 'beauty', keywords: ['heart', 'decoration', 'love', 'beauty'] },
    { icon: 'üí†', category: 'beauty', keywords: ['diamond', 'shape', 'gem', 'beauty'] },
    { icon: 'üí°', category: 'beauty', keywords: ['lightbulb', 'idea', 'bright', 'light'] },
    { icon: 'üí¢', category: 'beauty', keywords: ['anger', 'symbol', 'mad', 'emotion'] },
    { icon: 'üí£', category: 'beauty', keywords: ['bomb', 'explosive', 'danger', 'warning'] },
    { icon: 'üí§', category: 'beauty', keywords: ['sleeping', 'zzz', 'sleep', 'rest'] },
    { icon: 'üí•', category: 'beauty', keywords: ['explosion', 'boom', 'collision', 'impact'] },
    { icon: 'üí¶', category: 'beauty', keywords: ['sweat', 'droplets', 'water', 'exercise'] },
    { icon: 'üí®', category: 'beauty', keywords: ['wind', 'blowing', 'air', 'fast'] },
    { icon: 'üí©', category: 'beauty', keywords: ['poop', 'pile', 'waste', 'funny'] },
    { icon: 'üí´', category: 'beauty', keywords: ['dizzy', 'star', 'sparkle', 'magic'] },
    { icon: 'üí¨', category: 'beauty', keywords: ['speech', 'bubble', 'talk', 'chat'] },
    { icon: 'üíÆ', category: 'beauty', keywords: ['white', 'flower', 'blossom', 'beauty'] },
    { icon: 'üíØ', category: 'beauty', keywords: ['hundred', 'points', 'perfect', 'score'] },
    { icon: 'üí∞', category: 'beauty', keywords: ['money', 'bag', 'wealth', 'rich'] },
    { icon: 'üí±', category: 'beauty', keywords: ['currency', 'exchange', 'money', 'trade'] },
    { icon: 'üí≤', category: 'beauty', keywords: ['dollar', 'sign', 'money', 'currency'] },
    { icon: 'üí≥', category: 'beauty', keywords: ['credit', 'card', 'payment', 'money'] },
    { icon: 'üí¥', category: 'beauty', keywords: ['yen', 'banknote', 'money', 'japan'] },
    { icon: 'üíµ', category: 'beauty', keywords: ['dollar', 'banknote', 'money', 'usa'] },
    { icon: 'üí∂', category: 'beauty', keywords: ['euro', 'banknote', 'money', 'europe'] },
    { icon: 'üí∑', category: 'beauty', keywords: ['pound', 'banknote', 'money', 'uk'] },
    { icon: 'üí∏', category: 'beauty', keywords: ['money', 'wings', 'flying', 'expensive'] },
    { icon: 'üíπ', category: 'beauty', keywords: ['chart', 'increasing', 'yen', 'growth'] },
    { icon: 'üí∫', category: 'beauty', keywords: ['seat', 'chair', 'sitting', 'rest'] },
    { icon: 'üíª', category: 'beauty', keywords: ['laptop', 'computer', 'work', 'tech'] },
    { icon: 'üíº', category: 'beauty', keywords: ['briefcase', 'work', 'business', 'office'] },
    { icon: 'üíΩ', category: 'beauty', keywords: ['minidisc', 'disk', 'music', 'storage'] },
    { icon: 'üíæ', category: 'beauty', keywords: ['floppy', 'disk', 'save', 'storage'] },
    { icon: 'üíø', category: 'beauty', keywords: ['optical', 'disk', 'cd', 'music'] },
    { icon: 'üìÄ', category: 'beauty', keywords: ['dvd', 'disk', 'movie', 'video'] },
    
    // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
    { icon: '‚ö´', category: 'minimal', keywords: ['circle', 'black', 'dot', 'minimal'] },
    { icon: '‚ö™', category: 'minimal', keywords: ['circle', 'white', 'dot', 'minimal'] },
    { icon: 'üî¥', category: 'minimal', keywords: ['circle', 'red', 'dot', 'minimal'] },
    { icon: 'üü†', category: 'minimal', keywords: ['circle', 'orange', 'dot', 'minimal'] },
    { icon: 'üü°', category: 'minimal', keywords: ['circle', 'yellow', 'dot', 'minimal'] },
    { icon: 'üü¢', category: 'minimal', keywords: ['circle', 'green', 'dot', 'minimal'] },
    { icon: 'üîµ', category: 'minimal', keywords: ['circle', 'blue', 'dot', 'minimal'] },
    { icon: 'üü£', category: 'minimal', keywords: ['circle', 'purple', 'dot', 'minimal'] },
    { icon: 'üü§', category: 'minimal', keywords: ['circle', 'brown', 'dot', 'minimal'] },
    { icon: '‚ö´', category: 'minimal', keywords: ['square', 'black', 'box', 'minimal'] },
    { icon: '‚ö™', category: 'minimal', keywords: ['square', 'white', 'box', 'minimal'] },
    { icon: 'üî¥', category: 'minimal', keywords: ['square', 'red', 'box', 'minimal'] },
    { icon: 'üü†', category: 'minimal', keywords: ['square', 'orange', 'box', 'minimal'] },
    { icon: 'üü°', category: 'minimal', keywords: ['square', 'yellow', 'box', 'minimal'] },
    { icon: 'üü¢', category: 'minimal', keywords: ['square', 'green', 'box', 'minimal'] },
    { icon: 'üîµ', category: 'minimal', keywords: ['square', 'blue', 'box', 'minimal'] },
    { icon: 'üü£', category: 'minimal', keywords: ['square', 'purple', 'box', 'minimal'] },
    { icon: 'üü§', category: 'minimal', keywords: ['square', 'brown', 'box', 'minimal'] },
    { icon: 'üî∫', category: 'minimal', keywords: ['triangle', 'red', 'up', 'minimal'] },
    { icon: 'üîª', category: 'minimal', keywords: ['triangle', 'red', 'down', 'minimal'] },
    { icon: 'üî∏', category: 'minimal', keywords: ['triangle', 'orange', 'small', 'minimal'] },
    { icon: 'üîπ', category: 'minimal', keywords: ['triangle', 'blue', 'small', 'minimal'] },
    { icon: 'üî∂', category: 'minimal', keywords: ['triangle', 'orange', 'large', 'minimal'] },
    { icon: 'üî∑', category: 'minimal', keywords: ['triangle', 'blue', 'large', 'minimal'] },
    { icon: 'üî¥', category: 'minimal', keywords: ['diamond', 'red', 'gem', 'minimal'] },
    { icon: 'üîµ', category: 'minimal', keywords: ['diamond', 'blue', 'gem', 'minimal'] },
    { icon: 'üî∫', category: 'minimal', keywords: ['diamond', 'orange', 'gem', 'minimal'] },
    { icon: 'üîª', category: 'minimal', keywords: ['diamond', 'blue', 'gem', 'minimal'] },
    
    // –°–∏–º–≤–æ–ª—ã –∏ –∑–Ω–∞–∫–∏
    { icon: '‚ûï', category: 'minimal', keywords: ['plus', 'add', 'cross', 'minimal'] },
    { icon: '‚ûñ', category: 'minimal', keywords: ['minus', 'subtract', 'dash', 'minimal'] },
    { icon: '‚úñÔ∏è', category: 'minimal', keywords: ['multiply', 'times', 'x', 'minimal'] },
    { icon: '‚ûó', category: 'minimal', keywords: ['divide', 'division', 'slash', 'minimal'] },
    { icon: '‚úîÔ∏è', category: 'minimal', keywords: ['check', 'tick', 'correct', 'minimal'] },
    { icon: '‚ùå', category: 'minimal', keywords: ['cross', 'wrong', 'error', 'minimal'] },
    { icon: '‚úÖ', category: 'minimal', keywords: ['check', 'green', 'correct', 'minimal'] },
    { icon: '‚ùé', category: 'minimal', keywords: ['cross', 'red', 'wrong', 'minimal'] },
    { icon: '‚≠ê', category: 'minimal', keywords: ['star', 'favorite', 'rating', 'minimal'] },
    { icon: 'üåü', category: 'minimal', keywords: ['star', 'glowing', 'bright', 'minimal'] },
    { icon: 'üí´', category: 'minimal', keywords: ['star', 'dizzy', 'sparkle', 'minimal'] },
    { icon: '‚ú®', category: 'minimal', keywords: ['sparkles', 'shine', 'magic', 'minimal'] },
    { icon: '‚ùì', category: 'minimal', keywords: ['question', 'help', 'ask', 'minimal'] },
    { icon: '‚ùî', category: 'minimal', keywords: ['question', 'white', 'help', 'minimal'] },
    { icon: '‚ùï', category: 'minimal', keywords: ['exclamation', 'white', 'warning', 'minimal'] },
    { icon: '‚ùó', category: 'minimal', keywords: ['exclamation', 'red', 'warning', 'minimal'] },
    { icon: '‚ÄºÔ∏è', category: 'minimal', keywords: ['double', 'exclamation', 'urgent', 'minimal'] },
    { icon: '‚ÅâÔ∏è', category: 'minimal', keywords: ['exclamation', 'question', 'surprise', 'minimal'] },
    { icon: '‚ù£Ô∏è', category: 'minimal', keywords: ['heart', 'exclamation', 'love', 'minimal'] },
    { icon: 'üí¢', category: 'minimal', keywords: ['anger', 'symbol', 'mad', 'minimal'] },
    { icon: 'üíØ', category: 'minimal', keywords: ['hundred', 'points', 'perfect', 'minimal'] },
    { icon: 'üîü', category: 'minimal', keywords: ['ten', 'number', 'keycap', 'minimal'] },
    { icon: 'üî¢', category: 'minimal', keywords: ['numbers', '123', 'digits', 'minimal'] },
    { icon: 'üî£', category: 'minimal', keywords: ['symbols', 'punctuation', 'marks', 'minimal'] },
    { icon: 'üî§', category: 'minimal', keywords: ['letters', 'abc', 'alphabet', 'minimal'] },
    { icon: 'üÖ∞Ô∏è', category: 'minimal', keywords: ['a', 'blood', 'type', 'minimal'] },
    { icon: 'üÖ±Ô∏è', category: 'minimal', keywords: ['b', 'blood', 'type', 'minimal'] },
    { icon: 'üÜé', category: 'minimal', keywords: ['ab', 'blood', 'type', 'minimal'] },
    { icon: 'üÖæÔ∏è', category: 'minimal', keywords: ['o', 'blood', 'type', 'minimal'] },
    { icon: 'üÜë', category: 'minimal', keywords: ['cl', 'clear', 'delete', 'minimal'] },
    { icon: 'üÜí', category: 'minimal', keywords: ['cool', 'squared', 'fresh', 'minimal'] },
    { icon: 'üÜì', category: 'minimal', keywords: ['free', 'squared', 'no', 'minimal'] },
    { icon: 'üÜî', category: 'minimal', keywords: ['id', 'squared', 'identity', 'minimal'] },
    { icon: 'üÜï', category: 'minimal', keywords: ['new', 'squared', 'fresh', 'minimal'] },
    { icon: 'üÜñ', category: 'minimal', keywords: ['ng', 'squared', 'no', 'minimal'] },
    { icon: 'üÜó', category: 'minimal', keywords: ['ok', 'squared', 'good', 'minimal'] },
    { icon: 'üÜò', category: 'minimal', keywords: ['sos', 'squared', 'help', 'minimal'] },
    { icon: 'üÜô', category: 'minimal', keywords: ['up', 'squared', 'arrow', 'minimal'] },
    { icon: 'üÜö', category: 'minimal', keywords: ['vs', 'squared', 'versus', 'minimal'] },
    { icon: 'üàÅ', category: 'minimal', keywords: ['japanese', 'here', 'location', 'minimal'] },
    { icon: 'üàÇÔ∏è', category: 'minimal', keywords: ['japanese', 'service', 'charge', 'minimal'] },
    { icon: 'üà∑Ô∏è', category: 'minimal', keywords: ['japanese', 'monthly', 'amount', 'minimal'] },
    { icon: 'üà∂', category: 'minimal', keywords: ['japanese', 'not', 'free', 'minimal'] },
    { icon: 'üàØ', category: 'minimal', keywords: ['japanese', 'reserved', 'booking', 'minimal'] },
    { icon: 'üâê', category: 'minimal', keywords: ['japanese', 'bargain', 'deal', 'minimal'] },
    { icon: 'üàπ', category: 'minimal', keywords: ['japanese', 'discount', 'sale', 'minimal'] },
    { icon: 'üàö', category: 'minimal', keywords: ['japanese', 'free', 'charge', 'minimal'] },
    { icon: 'üà≤', category: 'minimal', keywords: ['japanese', 'prohibited', 'no', 'minimal'] },
    { icon: 'üâë', category: 'minimal', keywords: ['japanese', 'acceptable', 'ok', 'minimal'] },
    { icon: 'üà∏', category: 'minimal', keywords: ['japanese', 'application', 'form', 'minimal'] },
    { icon: 'üà¥', category: 'minimal', keywords: ['japanese', 'passing', 'grade', 'minimal'] },
    { icon: 'üà≥', category: 'minimal', keywords: ['japanese', 'vacancy', 'empty', 'minimal'] },
    { icon: '„äóÔ∏è', category: 'minimal', keywords: ['japanese', 'congratulations', 'celebration', 'minimal'] },
    { icon: '„äôÔ∏è', category: 'minimal', keywords: ['japanese', 'secret', 'confidential', 'minimal'] },
    { icon: 'üà∫', category: 'minimal', keywords: ['japanese', 'open', 'business', 'minimal'] },
    { icon: 'üàµ', category: 'minimal', keywords: ['japanese', 'no', 'vacancy', 'minimal'] },
    
    // –°—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    { icon: '‚¨ÜÔ∏è', category: 'minimal', keywords: ['up', 'arrow', 'north', 'minimal'] },
    { icon: '‚¨áÔ∏è', category: 'minimal', keywords: ['down', 'arrow', 'south', 'minimal'] },
    { icon: '‚¨ÖÔ∏è', category: 'minimal', keywords: ['left', 'arrow', 'west', 'minimal'] },
    { icon: '‚û°Ô∏è', category: 'minimal', keywords: ['right', 'arrow', 'east', 'minimal'] },
    { icon: '‚ÜóÔ∏è', category: 'minimal', keywords: ['up', 'right', 'northeast', 'minimal'] },
    { icon: '‚ÜòÔ∏è', category: 'minimal', keywords: ['down', 'right', 'southeast', 'minimal'] },
    { icon: '‚ÜôÔ∏è', category: 'minimal', keywords: ['down', 'left', 'southwest', 'minimal'] },
    { icon: '‚ÜñÔ∏è', category: 'minimal', keywords: ['up', 'left', 'northwest', 'minimal'] },
    { icon: '‚ÜïÔ∏è', category: 'minimal', keywords: ['up', 'down', 'vertical', 'minimal'] },
    { icon: '‚ÜîÔ∏è', category: 'minimal', keywords: ['left', 'right', 'horizontal', 'minimal'] },
    { icon: '‚Ü©Ô∏è', category: 'minimal', keywords: ['return', 'left', 'back', 'minimal'] },
    { icon: '‚Ü™Ô∏è', category: 'minimal', keywords: ['return', 'right', 'forward', 'minimal'] },
    { icon: '‚§¥Ô∏è', category: 'minimal', keywords: ['up', 'right', 'curve', 'minimal'] },
    { icon: '‚§µÔ∏è', category: 'minimal', keywords: ['down', 'right', 'curve', 'minimal'] },
    { icon: 'üîÉ', category: 'minimal', keywords: ['clockwise', 'arrows', 'refresh', 'minimal'] },
    { icon: 'üîÑ', category: 'minimal', keywords: ['counterclockwise', 'arrows', 'undo', 'minimal'] },
    { icon: 'üîô', category: 'minimal', keywords: ['back', 'arrow', 'return', 'minimal'] },
    { icon: 'üîö', category: 'minimal', keywords: ['end', 'arrow', 'finish', 'minimal'] },
    { icon: 'üîõ', category: 'minimal', keywords: ['on', 'arrow', 'active', 'minimal'] },
    { icon: 'üîú', category: 'minimal', keywords: ['soon', 'arrow', 'coming', 'minimal'] },
    { icon: 'üîù', category: 'minimal', keywords: ['top', 'arrow', 'up', 'minimal'] },
    { icon: 'üîû', category: 'minimal', keywords: ['18', 'adult', 'restricted', 'minimal'] },
    { icon: 'üîü', category: 'minimal', keywords: ['ten', 'number', 'keycap', 'minimal'] },
    { icon: 'üî¢', category: 'minimal', keywords: ['numbers', '123', 'digits', 'minimal'] },
    { icon: 'üî£', category: 'minimal', keywords: ['symbols', 'punctuation', 'marks', 'minimal'] },
    { icon: 'üî§', category: 'minimal', keywords: ['letters', 'abc', 'alphabet', 'minimal'] },
    { icon: 'üÖ∞Ô∏è', category: 'minimal', keywords: ['a', 'blood', 'type', 'minimal'] },
    { icon: 'üÖ±Ô∏è', category: 'minimal', keywords: ['b', 'blood', 'type', 'minimal'] },
    { icon: 'üÜé', category: 'minimal', keywords: ['ab', 'blood', 'type', 'minimal'] },
    { icon: 'üÖæÔ∏è', category: 'minimal', keywords: ['o', 'blood', 'type', 'minimal'] },
    { icon: 'üÜë', category: 'minimal', keywords: ['cl', 'clear', 'delete', 'minimal'] },
    { icon: 'üÜí', category: 'minimal', keywords: ['cool', 'squared', 'fresh', 'minimal'] },
    { icon: 'üÜì', category: 'minimal', keywords: ['free', 'squared', 'no', 'minimal'] },
    { icon: 'üÜî', category: 'minimal', keywords: ['id', 'squared', 'identity', 'minimal'] },
    { icon: 'üÜï', category: 'minimal', keywords: ['new', 'squared', 'fresh', 'minimal'] },
    { icon: 'üÜñ', category: 'minimal', keywords: ['ng', 'squared', 'no', 'minimal'] },
    { icon: 'üÜó', category: 'minimal', keywords: ['ok', 'squared', 'good', 'minimal'] },
    { icon: 'üÜò', category: 'minimal', keywords: ['sos', 'squared', 'help', 'minimal'] },
    { icon: 'üÜô', category: 'minimal', keywords: ['up', 'squared', 'arrow', 'minimal'] },
    { icon: 'üÜö', category: 'minimal', keywords: ['vs', 'squared', 'versus', 'minimal'] },
    { icon: 'üàÅ', category: 'minimal', keywords: ['japanese', 'here', 'location', 'minimal'] },
    { icon: 'üàÇÔ∏è', category: 'minimal', keywords: ['japanese', 'service', 'charge', 'minimal'] },
    { icon: 'üà∑Ô∏è', category: 'minimal', keywords: ['japanese', 'monthly', 'amount', 'minimal'] },
    { icon: 'üà∂', category: 'minimal', keywords: ['japanese', 'not', 'free', 'minimal'] },
    { icon: 'üàØ', category: 'minimal', keywords: ['japanese', 'reserved', 'booking', 'minimal'] },
    { icon: 'üâê', category: 'minimal', keywords: ['japanese', 'bargain', 'deal', 'minimal'] },
    { icon: 'üàπ', category: 'minimal', keywords: ['japanese', 'discount', 'sale', 'minimal'] },
    { icon: 'üàö', category: 'minimal', keywords: ['japanese', 'free', 'charge', 'minimal'] },
    { icon: 'üà≤', category: 'minimal', keywords: ['japanese', 'prohibited', 'no', 'minimal'] },
    { icon: 'üâë', category: 'minimal', keywords: ['japanese', 'acceptable', 'ok', 'minimal'] },
    { icon: 'üà∏', category: 'minimal', keywords: ['japanese', 'application', 'form', 'minimal'] },
    { icon: 'üà¥', category: 'minimal', keywords: ['japanese', 'passing', 'grade', 'minimal'] },
    { icon: 'üà≥', category: 'minimal', keywords: ['japanese', 'vacancy', 'empty', 'minimal'] },
    { icon: '„äóÔ∏è', category: 'minimal', keywords: ['japanese', 'congratulations', 'celebration', 'minimal'] },
    { icon: '„äôÔ∏è', category: 'minimal', keywords: ['japanese', 'secret', 'confidential', 'minimal'] },
    { icon: 'üà∫', category: 'minimal', keywords: ['japanese', 'open', 'business', 'minimal'] },
    { icon: 'üàµ', category: 'minimal', keywords: ['japanese', 'no', 'vacancy', 'minimal'] },
    
    // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    { icon: 'üê∂', category: 'animals', keywords: ['dog', 'puppy', 'pet', 'animal'] },
    { icon: 'üê±', category: 'animals', keywords: ['cat', 'kitten', 'pet', 'animal'] },
    { icon: 'üê≠', category: 'animals', keywords: ['mouse', 'rat', 'small', 'animal'] },
    { icon: 'üêπ', category: 'animals', keywords: ['hamster', 'pet', 'small', 'animal'] },
    { icon: 'üê∞', category: 'animals', keywords: ['rabbit', 'bunny', 'pet', 'animal'] },
    { icon: 'ü¶ä', category: 'animals', keywords: ['fox', 'wild', 'cunning', 'animal'] },
    { icon: 'üêª', category: 'animals', keywords: ['bear', 'wild', 'strong', 'animal'] },
    { icon: 'üêº', category: 'animals', keywords: ['panda', 'cute', 'china', 'animal'] },
    { icon: 'üê®', category: 'animals', keywords: ['koala', 'australia', 'cute', 'animal'] },
    { icon: 'üêØ', category: 'animals', keywords: ['tiger', 'wild', 'stripes', 'animal'] },
    { icon: 'ü¶Å', category: 'animals', keywords: ['lion', 'king', 'wild', 'animal'] },
    { icon: 'üêÆ', category: 'animals', keywords: ['cow', 'farm', 'milk', 'animal'] },
    { icon: 'üê∑', category: 'animals', keywords: ['pig', 'farm', 'pink', 'animal'] },
    { icon: 'üê∏', category: 'animals', keywords: ['frog', 'green', 'jump', 'animal'] },
    { icon: 'üêµ', category: 'animals', keywords: ['monkey', 'banana', 'funny', 'animal'] },
    { icon: 'üôà', category: 'animals', keywords: ['monkey', 'see', 'no', 'evil'] },
    { icon: 'üôâ', category: 'animals', keywords: ['monkey', 'hear', 'no', 'evil'] },
    { icon: 'üôä', category: 'animals', keywords: ['monkey', 'speak', 'no', 'evil'] },
    { icon: 'üêí', category: 'animals', keywords: ['monkey', 'wild', 'jungle', 'animal'] },
    { icon: 'ü¶ç', category: 'animals', keywords: ['gorilla', 'strong', 'wild', 'animal'] },
    { icon: 'ü¶ß', category: 'animals', keywords: ['orangutan', 'ape', 'wild', 'animal'] },
    { icon: 'üêï', category: 'animals', keywords: ['dog', 'pet', 'loyal', 'animal'] },
    { icon: 'üê©', category: 'animals', keywords: ['poodle', 'dog', 'curly', 'animal'] },
    { icon: 'üê∫', category: 'animals', keywords: ['wolf', 'wild', 'pack', 'animal'] },
    { icon: 'ü¶ù', category: 'animals', keywords: ['raccoon', 'mask', 'cute', 'animal'] },
    { icon: 'üêà', category: 'animals', keywords: ['cat', 'pet', 'independent', 'animal'] },
    { icon: 'ü¶Å', category: 'animals', keywords: ['lion', 'king', 'wild', 'animal'] },
    { icon: 'üêÖ', category: 'animals', keywords: ['tiger', 'wild', 'stripes', 'animal'] },
    { icon: 'üêÜ', category: 'animals', keywords: ['leopard', 'spots', 'wild', 'animal'] },
    { icon: 'üê¥', category: 'animals', keywords: ['horse', 'ride', 'fast', 'animal'] },
    { icon: 'ü¶Ñ', category: 'animals', keywords: ['unicorn', 'magic', 'rainbow', 'animal'] },
    { icon: 'ü¶ì', category: 'animals', keywords: ['zebra', 'stripes', 'africa', 'animal'] },
    { icon: 'ü¶å', category: 'animals', keywords: ['deer', 'antlers', 'forest', 'animal'] },
    { icon: 'üêÇ', category: 'animals', keywords: ['ox', 'bull', 'strong', 'animal'] },
    { icon: 'üêÉ', category: 'animals', keywords: ['water', 'buffalo', 'strong', 'animal'] },
    { icon: 'üêÑ', category: 'animals', keywords: ['cow', 'farm', 'milk', 'animal'] },
    { icon: 'üêé', category: 'animals', keywords: ['horse', 'race', 'fast', 'animal'] },
    { icon: 'üêñ', category: 'animals', keywords: ['pig', 'farm', 'pink', 'animal'] },
    { icon: 'üêó', category: 'animals', keywords: ['boar', 'wild', 'tusks', 'animal'] },
    { icon: 'üêò', category: 'animals', keywords: ['elephant', 'big', 'trunk', 'animal'] },
    { icon: 'ü¶è', category: 'animals', keywords: ['rhinoceros', 'horn', 'big', 'animal'] },
    { icon: 'ü¶õ', category: 'animals', keywords: ['hippopotamus', 'water', 'big', 'animal'] },
    { icon: 'üê™', category: 'animals', keywords: ['camel', 'desert', 'hump', 'animal'] },
    { icon: 'üê´', category: 'animals', keywords: ['two', 'hump', 'camel', 'animal'] },
    { icon: 'ü¶í', category: 'animals', keywords: ['giraffe', 'tall', 'neck', 'animal'] },
    { icon: 'ü¶ò', category: 'animals', keywords: ['kangaroo', 'australia', 'jump', 'animal'] },
    { icon: 'üêÉ', category: 'animals', keywords: ['water', 'buffalo', 'strong', 'animal'] },
    { icon: 'üêÑ', category: 'animals', keywords: ['cow', 'farm', 'milk', 'animal'] },
    { icon: 'üêé', category: 'animals', keywords: ['horse', 'race', 'fast', 'animal'] },
    { icon: 'üêñ', category: 'animals', keywords: ['pig', 'farm', 'pink', 'animal'] },
    { icon: 'üêó', category: 'animals', keywords: ['boar', 'wild', 'tusks', 'animal'] },
    { icon: 'üêò', category: 'animals', keywords: ['elephant', 'big', 'trunk', 'animal'] },
    { icon: 'ü¶è', category: 'animals', keywords: ['rhinoceros', 'horn', 'big', 'animal'] },
    { icon: 'ü¶õ', category: 'animals', keywords: ['hippopotamus', 'water', 'big', 'animal'] },
    { icon: 'üê™', category: 'animals', keywords: ['camel', 'desert', 'hump', 'animal'] },
    { icon: 'üê´', category: 'animals', keywords: ['two', 'hump', 'camel', 'animal'] },
    { icon: 'ü¶í', category: 'animals', keywords: ['giraffe', 'tall', 'neck', 'animal'] },
    { icon: 'ü¶ò', category: 'animals', keywords: ['kangaroo', 'australia', 'jump', 'animal'] },
    
    // –ü—Ç–∏—Ü—ã
    { icon: 'üê¶', category: 'animals', keywords: ['bird', 'fly', 'wings', 'animal'] },
    { icon: 'üêß', category: 'animals', keywords: ['penguin', 'antarctica', 'cold', 'animal'] },
    { icon: 'üêî', category: 'animals', keywords: ['chicken', 'farm', 'egg', 'animal'] },
    { icon: 'üêì', category: 'animals', keywords: ['rooster', 'farm', 'crow', 'animal'] },
    { icon: 'ü¶Ü', category: 'animals', keywords: ['duck', 'water', 'quack', 'animal'] },
    { icon: 'ü¶Ö', category: 'animals', keywords: ['eagle', 'bird', 'fly', 'animal'] },
    { icon: 'ü¶â', category: 'animals', keywords: ['owl', 'night', 'wise', 'animal'] },
    { icon: 'ü¶á', category: 'animals', keywords: ['bat', 'night', 'fly', 'animal'] },
    { icon: 'ü¶ú', category: 'animals', keywords: ['parrot', 'colorful', 'talk', 'animal'] },
    { icon: 'ü¶ö', category: 'animals', keywords: ['peacock', 'beautiful', 'feathers', 'animal'] },
    { icon: 'ü¶©', category: 'animals', keywords: ['flamingo', 'pink', 'water', 'animal'] },
    { icon: 'üïäÔ∏è', category: 'animals', keywords: ['dove', 'peace', 'white', 'animal'] },
    { icon: 'üê•', category: 'animals', keywords: ['chick', 'baby', 'yellow', 'animal'] },
    { icon: 'üê£', category: 'animals', keywords: ['hatching', 'chick', 'egg', 'animal'] },
    { icon: 'üê§', category: 'animals', keywords: ['baby', 'chick', 'small', 'animal'] },
    { icon: 'üê¶', category: 'animals', keywords: ['bird', 'fly', 'wings', 'animal'] },
    { icon: 'üêß', category: 'animals', keywords: ['penguin', 'antarctica', 'cold', 'animal'] },
    { icon: 'üêî', category: 'animals', keywords: ['chicken', 'farm', 'egg', 'animal'] },
    { icon: 'üêì', category: 'animals', keywords: ['rooster', 'farm', 'crow', 'animal'] },
    { icon: 'ü¶Ü', category: 'animals', keywords: ['duck', 'water', 'quack', 'animal'] },
    { icon: 'ü¶Ö', category: 'animals', keywords: ['eagle', 'bird', 'fly', 'animal'] },
    { icon: 'ü¶â', category: 'animals', keywords: ['owl', 'night', 'wise', 'animal'] },
    { icon: 'ü¶á', category: 'animals', keywords: ['bat', 'night', 'fly', 'animal'] },
    { icon: 'ü¶ú', category: 'animals', keywords: ['parrot', 'colorful', 'talk', 'animal'] },
    { icon: 'ü¶ö', category: 'animals', keywords: ['peacock', 'beautiful', 'feathers', 'animal'] },
    { icon: 'ü¶©', category: 'animals', keywords: ['flamingo', 'pink', 'water', 'animal'] },
    { icon: 'üïäÔ∏è', category: 'animals', keywords: ['dove', 'peace', 'white', 'animal'] },
    { icon: 'üê•', category: 'animals', keywords: ['chick', 'baby', 'yellow', 'animal'] },
    { icon: 'üê£', category: 'animals', keywords: ['hatching', 'chick', 'egg', 'animal'] },
    { icon: 'üê§', category: 'animals', keywords: ['baby', 'chick', 'small', 'animal'] },
    
    // –ú–æ—Ä—Å–∫–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ
    { icon: 'üêü', category: 'animals', keywords: ['fish', 'water', 'swim', 'animal'] },
    { icon: 'üê†', category: 'animals', keywords: ['tropical', 'fish', 'colorful', 'animal'] },
    { icon: 'üê°', category: 'animals', keywords: ['blowfish', 'puffer', 'water', 'animal'] },
    { icon: 'ü¶à', category: 'animals', keywords: ['shark', 'teeth', 'water', 'animal'] },
    { icon: 'üêô', category: 'animals', keywords: ['octopus', 'tentacles', 'water', 'animal'] },
    { icon: 'üêö', category: 'animals', keywords: ['shell', 'beach', 'spiral', 'animal'] },
    { icon: 'üêå', category: 'animals', keywords: ['snail', 'slow', 'shell', 'animal'] },
    { icon: 'ü¶ã', category: 'animals', keywords: ['butterfly', 'wings', 'colorful', 'animal'] },
    { icon: 'üêõ', category: 'animals', keywords: ['bug', 'insect', 'small', 'animal'] },
    { icon: 'üêú', category: 'animals', keywords: ['ant', 'small', 'work', 'animal'] },
    { icon: 'üêù', category: 'animals', keywords: ['bee', 'honey', 'buzz', 'animal'] },
    { icon: 'ü¶ü', category: 'animals', keywords: ['mosquito', 'buzz', 'bite', 'animal'] },
    { icon: 'ü¶ó', category: 'animals', keywords: ['cricket', 'chirp', 'jump', 'animal'] },
    { icon: 'üï∑Ô∏è', category: 'animals', keywords: ['spider', 'web', 'eight', 'animal'] },
    { icon: 'üï∏Ô∏è', category: 'animals', keywords: ['spider', 'web', 'net', 'animal'] },
    { icon: 'ü¶Ç', category: 'animals', keywords: ['scorpion', 'sting', 'tail', 'animal'] },
    { icon: 'ü¶†', category: 'animals', keywords: ['microbe', 'virus', 'small', 'animal'] },
    { icon: 'üê¢', category: 'animals', keywords: ['turtle', 'slow', 'shell', 'animal'] },
    { icon: 'ü¶é', category: 'animals', keywords: ['lizard', 'reptile', 'scales', 'animal'] },
    { icon: 'üêç', category: 'animals', keywords: ['snake', 'slither', 'reptile', 'animal'] },
    { icon: 'ü¶ï', category: 'animals', keywords: ['sauropod', 'dinosaur', 'big', 'animal'] },
    { icon: 'ü¶ñ', category: 'animals', keywords: ['t-rex', 'dinosaur', 'big', 'animal'] },
    { icon: 'üê≤', category: 'animals', keywords: ['dragon', 'fire', 'mythical', 'animal'] },
    { icon: 'üêâ', category: 'animals', keywords: ['dragon', 'chinese', 'mythical', 'animal'] },
    { icon: 'ü¶ï', category: 'animals', keywords: ['sauropod', 'dinosaur', 'big', 'animal'] },
    { icon: 'ü¶ñ', category: 'animals', keywords: ['t-rex', 'dinosaur', 'big', 'animal'] },
    { icon: 'üê≤', category: 'animals', keywords: ['dragon', 'fire', 'mythical', 'animal'] },
    { icon: 'üêâ', category: 'animals', keywords: ['dragon', 'chinese', 'mythical', 'animal'] },
    
    // –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏
    { icon: 'üçé', category: 'food', keywords: ['apple', 'fruit', 'healthy', 'food'] },
    { icon: 'üçä', category: 'food', keywords: ['orange', 'fruit', 'citrus', 'food'] },
    { icon: 'üçã', category: 'food', keywords: ['lemon', 'fruit', 'citrus', 'food'] },
    { icon: 'üçå', category: 'food', keywords: ['banana', 'fruit', 'yellow', 'food'] },
    { icon: 'üçâ', category: 'food', keywords: ['watermelon', 'fruit', 'summer', 'food'] },
    { icon: 'üçá', category: 'food', keywords: ['grapes', 'fruit', 'wine', 'food'] },
    { icon: 'üçì', category: 'food', keywords: ['strawberry', 'fruit', 'red', 'food'] },
    { icon: 'üçà', category: 'food', keywords: ['melon', 'fruit', 'sweet', 'food'] },
    { icon: 'üçí', category: 'food', keywords: ['cherry', 'fruit', 'red', 'food'] },
    { icon: 'üçë', category: 'food', keywords: ['peach', 'fruit', 'soft', 'food'] },
    { icon: 'ü•≠', category: 'food', keywords: ['mango', 'fruit', 'tropical', 'food'] },
    { icon: 'üçç', category: 'food', keywords: ['pineapple', 'fruit', 'tropical', 'food'] },
    { icon: 'ü••', category: 'food', keywords: ['coconut', 'fruit', 'tropical', 'food'] },
    { icon: 'ü•ù', category: 'food', keywords: ['kiwi', 'fruit', 'green', 'food'] },
    { icon: 'üçÖ', category: 'food', keywords: ['tomato', 'vegetable', 'red', 'food'] },
    { icon: 'üçÜ', category: 'food', keywords: ['eggplant', 'vegetable', 'purple', 'food'] },
    { icon: 'ü•ë', category: 'food', keywords: ['avocado', 'vegetable', 'green', 'food'] },
    { icon: 'ü•¶', category: 'food', keywords: ['broccoli', 'vegetable', 'green', 'food'] },
    { icon: 'ü•ï', category: 'food', keywords: ['carrot', 'vegetable', 'orange', 'food'] },
    { icon: 'üåΩ', category: 'food', keywords: ['corn', 'vegetable', 'yellow', 'food'] },
    { icon: 'üå∂Ô∏è', category: 'food', keywords: ['pepper', 'vegetable', 'spicy', 'food'] },
    { icon: 'ü´í', category: 'food', keywords: ['olive', 'vegetable', 'green', 'food'] },
    { icon: 'ü•í', category: 'food', keywords: ['cucumber', 'vegetable', 'green', 'food'] },
    { icon: 'ü•¨', category: 'food', keywords: ['lettuce', 'vegetable', 'green', 'food'] },
    { icon: 'ü•≠', category: 'food', keywords: ['mango', 'fruit', 'tropical', 'food'] },
    { icon: 'üçç', category: 'food', keywords: ['pineapple', 'fruit', 'tropical', 'food'] },
    { icon: 'ü••', category: 'food', keywords: ['coconut', 'fruit', 'tropical', 'food'] },
    { icon: 'ü•ù', category: 'food', keywords: ['kiwi', 'fruit', 'green', 'food'] },
    { icon: 'üçÖ', category: 'food', keywords: ['tomato', 'vegetable', 'red', 'food'] },
    { icon: 'üçÜ', category: 'food', keywords: ['eggplant', 'vegetable', 'purple', 'food'] },
    { icon: 'ü•ë', category: 'food', keywords: ['avocado', 'vegetable', 'green', 'food'] },
    { icon: 'ü•¶', category: 'food', keywords: ['broccoli', 'vegetable', 'green', 'food'] },
    { icon: 'ü•ï', category: 'food', keywords: ['carrot', 'vegetable', 'orange', 'food'] },
    { icon: 'üåΩ', category: 'food', keywords: ['corn', 'vegetable', 'yellow', 'food'] },
    { icon: 'üå∂Ô∏è', category: 'food', keywords: ['pepper', 'vegetable', 'spicy', 'food'] },
    { icon: 'ü´í', category: 'food', keywords: ['olive', 'vegetable', 'green', 'food'] },
    { icon: 'ü•í', category: 'food', keywords: ['cucumber', 'vegetable', 'green', 'food'] },
    { icon: 'ü•¨', category: 'food', keywords: ['lettuce', 'vegetable', 'green', 'food'] },
    
    // –ù–∞–ø–∏—Ç–∫–∏
    { icon: 'ü•§', category: 'food', keywords: ['cup', 'straw', 'drink', 'food'] },
    { icon: 'üßÉ', category: 'food', keywords: ['beverage', 'box', 'drink', 'food'] },
    { icon: 'üßâ', category: 'food', keywords: ['mate', 'drink', 'herbal', 'food'] },
    { icon: 'üßä', category: 'food', keywords: ['ice', 'cube', 'cold', 'food'] },
    { icon: 'ü•¢', category: 'food', keywords: ['chopsticks', 'eating', 'asian', 'food'] },
    { icon: 'üçΩÔ∏è', category: 'food', keywords: ['plate', 'fork', 'knife', 'food'] },
    { icon: 'üç¥', category: 'food', keywords: ['fork', 'knife', 'eating', 'food'] },
    { icon: 'ü•Ñ', category: 'food', keywords: ['spoon', 'eating', 'soup', 'food'] },
    { icon: 'üî™', category: 'food', keywords: ['knife', 'cutting', 'sharp', 'food'] },
    { icon: 'üè∫', category: 'food', keywords: ['amphora', 'vase', 'ancient', 'food'] },
    { icon: 'ü•§', category: 'food', keywords: ['cup', 'straw', 'drink', 'food'] },
    { icon: 'üßÉ', category: 'food', keywords: ['beverage', 'box', 'drink', 'food'] },
    { icon: 'üßâ', category: 'food', keywords: ['mate', 'drink', 'herbal', 'food'] },
    { icon: 'üßä', category: 'food', keywords: ['ice', 'cube', 'cold', 'food'] },
    { icon: 'ü•¢', category: 'food', keywords: ['chopsticks', 'eating', 'asian', 'food'] },
    { icon: 'üçΩÔ∏è', category: 'food', keywords: ['plate', 'fork', 'knife', 'food'] },
    { icon: 'üç¥', category: 'food', keywords: ['fork', 'knife', 'eating', 'food'] },
    { icon: 'ü•Ñ', category: 'food', keywords: ['spoon', 'eating', 'soup', 'food'] },
    { icon: 'üî™', category: 'food', keywords: ['knife', 'cutting', 'sharp', 'food'] },
    { icon: 'üè∫', category: 'food', keywords: ['amphora', 'vase', 'ancient', 'food'] },
    
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    { icon: 'üöó', category: 'transport', keywords: ['car', 'vehicle', 'drive', 'transport'] },
    { icon: 'üöï', category: 'transport', keywords: ['taxi', 'car', 'yellow', 'transport'] },
    { icon: 'üöô', category: 'transport', keywords: ['suv', 'car', 'big', 'transport'] },
    { icon: 'üöå', category: 'transport', keywords: ['bus', 'public', 'transport', 'transport'] },
    { icon: 'üöé', category: 'transport', keywords: ['trolleybus', 'electric', 'transport', 'transport'] },
    { icon: 'üèéÔ∏è', category: 'transport', keywords: ['race', 'car', 'fast', 'transport'] },
    { icon: 'üöì', category: 'transport', keywords: ['police', 'car', 'blue', 'transport'] },
    { icon: 'üöë', category: 'transport', keywords: ['ambulance', 'medical', 'emergency', 'transport'] },
    { icon: 'üöí', category: 'transport', keywords: ['fire', 'truck', 'red', 'transport'] },
    { icon: 'üöê', category: 'transport', keywords: ['minibus', 'van', 'small', 'transport'] },
    { icon: 'üõª', category: 'transport', keywords: ['pickup', 'truck', 'work', 'transport'] },
    { icon: 'üöö', category: 'transport', keywords: ['truck', 'delivery', 'big', 'transport'] },
    { icon: 'üöõ', category: 'transport', keywords: ['articulated', 'lorry', 'big', 'transport'] },
    { icon: 'üöú', category: 'transport', keywords: ['tractor', 'farm', 'work', 'transport'] },
    { icon: 'üèçÔ∏è', category: 'transport', keywords: ['motorcycle', 'bike', 'fast', 'transport'] },
    { icon: 'üõµ', category: 'transport', keywords: ['scooter', 'motor', 'small', 'transport'] },
    { icon: 'üõ∫', category: 'transport', keywords: ['auto', 'rickshaw', 'three', 'transport'] },
    { icon: 'üö≤', category: 'transport', keywords: ['bicycle', 'bike', 'pedal', 'transport'] },
    { icon: 'üõ¥', category: 'transport', keywords: ['kick', 'scooter', 'push', 'transport'] },
    { icon: 'üõπ', category: 'transport', keywords: ['skateboard', 'wheels', 'sport', 'transport'] },
    { icon: 'üõº', category: 'transport', keywords: ['roller', 'skate', 'wheels', 'transport'] },
    { icon: 'üöÅ', category: 'transport', keywords: ['helicopter', 'rotor', 'fly', 'transport'] },
    { icon: '‚úàÔ∏è', category: 'transport', keywords: ['airplane', 'plane', 'fly', 'transport'] },
    { icon: 'üõ©Ô∏è', category: 'transport', keywords: ['small', 'airplane', 'fly', 'transport'] },
    { icon: 'üõ´', category: 'transport', keywords: ['airplane', 'departure', 'takeoff', 'transport'] },
    { icon: 'üõ¨', category: 'transport', keywords: ['airplane', 'arrival', 'landing', 'transport'] },
    { icon: 'ü™Ç', category: 'transport', keywords: ['parachute', 'jump', 'sky', 'transport'] },
    { icon: 'üí∫', category: 'transport', keywords: ['seat', 'chair', 'sitting', 'transport'] },
    { icon: 'üöÄ', category: 'transport', keywords: ['rocket', 'space', 'launch', 'transport'] },
    { icon: 'üõ∏', category: 'transport', keywords: ['flying', 'saucer', 'ufo', 'transport'] },
    { icon: 'üöâ', category: 'transport', keywords: ['station', 'train', 'railway', 'transport'] },
    { icon: 'üöû', category: 'transport', keywords: ['mountain', 'railway', 'train', 'transport'] },
    { icon: 'üöù', category: 'transport', keywords: ['monorail', 'train', 'single', 'transport'] },
    { icon: 'üöÑ', category: 'transport', keywords: ['high', 'speed', 'train', 'transport'] },
    { icon: 'üöÖ', category: 'transport', keywords: ['bullet', 'train', 'fast', 'transport'] },
    { icon: 'üöà', category: 'transport', keywords: ['light', 'rail', 'train', 'transport'] },
    { icon: 'üöÇ', category: 'transport', keywords: ['steam', 'locomotive', 'train', 'transport'] },
    { icon: 'üöÉ', category: 'transport', keywords: ['railway', 'car', 'train', 'transport'] },
    { icon: 'üöã', category: 'transport', keywords: ['tram', 'car', 'electric', 'transport'] },
    { icon: 'üöç', category: 'transport', keywords: ['oncoming', 'bus', 'public', 'transport'] },
    { icon: 'üöò', category: 'transport', keywords: ['oncoming', 'automobile', 'car', 'transport'] },
    { icon: 'üöñ', category: 'transport', keywords: ['oncoming', 'taxi', 'car', 'transport'] },
    { icon: 'üö°', category: 'transport', keywords: ['aerial', 'tramway', 'cable', 'transport'] },
    { icon: 'üö†', category: 'transport', keywords: ['mountain', 'cableway', 'cable', 'transport'] },
    { icon: 'üöü', category: 'transport', keywords: ['suspension', 'railway', 'cable', 'transport'] },
    { icon: 'üé†', category: 'transport', keywords: ['carousel', 'horse', 'merry', 'transport'] },
    { icon: 'üé°', category: 'transport', keywords: ['ferris', 'wheel', 'amusement', 'transport'] },
    { icon: 'üé¢', category: 'transport', keywords: ['roller', 'coaster', 'amusement', 'transport'] },
    { icon: 'üöè', category: 'transport', keywords: ['bus', 'stop', 'station', 'transport'] },
    { icon: '‚õΩ', category: 'transport', keywords: ['fuel', 'pump', 'gas', 'transport'] },
    { icon: 'üö®', category: 'transport', keywords: ['police', 'car', 'light', 'transport'] },
    { icon: 'üö•', category: 'transport', keywords: ['horizontal', 'traffic', 'light', 'transport'] },
    { icon: 'üö¶', category: 'transport', keywords: ['vertical', 'traffic', 'light', 'transport'] },
    { icon: 'üõë', category: 'transport', keywords: ['stop', 'sign', 'red', 'transport'] },
    { icon: 'üöß', category: 'transport', keywords: ['construction', 'sign', 'work', 'transport'] },
    
    // –≠–º–æ—Ü–∏–∏ –∏ –ª–∏—Ü–∞
    { icon: 'üòÄ', category: 'emotions', keywords: ['grinning', 'face', 'happy', 'emotion'] },
    { icon: 'üòÉ', category: 'emotions', keywords: ['grinning', 'face', 'big', 'eyes', 'emotion'] },
    { icon: 'üòÑ', category: 'emotions', keywords: ['grinning', 'face', 'smiling', 'eyes', 'emotion'] },
    { icon: 'üòÅ', category: 'emotions', keywords: ['beaming', 'face', 'smiling', 'eyes', 'emotion'] },
    { icon: 'üòÜ', category: 'emotions', keywords: ['grinning', 'squinting', 'face', 'emotion'] },
    { icon: 'üòÖ', category: 'emotions', keywords: ['grinning', 'face', 'sweat', 'emotion'] },
    { icon: 'ü§£', category: 'emotions', keywords: ['rolling', 'floor', 'laughing', 'emotion'] },
    { icon: 'üòÇ', category: 'emotions', keywords: ['face', 'tears', 'joy', 'emotion'] },
    { icon: 'üôÇ', category: 'emotions', keywords: ['slightly', 'smiling', 'face', 'emotion'] },
    { icon: 'üôÉ', category: 'emotions', keywords: ['upside', 'down', 'face', 'emotion'] },
    { icon: 'üòâ', category: 'emotions', keywords: ['winking', 'face', 'wink', 'emotion'] },
    { icon: 'üòä', category: 'emotions', keywords: ['smiling', 'face', 'smiling', 'eyes', 'emotion'] },
    { icon: 'üòá', category: 'emotions', keywords: ['smiling', 'face', 'halo', 'emotion'] },
    { icon: 'ü•∞', category: 'emotions', keywords: ['smiling', 'face', 'hearts', 'emotion'] },
    { icon: 'üòç', category: 'emotions', keywords: ['smiling', 'face', 'heart', 'eyes', 'emotion'] },
    { icon: 'ü§©', category: 'emotions', keywords: ['star', 'struck', 'face', 'emotion'] },
    { icon: 'üòò', category: 'emotions', keywords: ['face', 'blowing', 'kiss', 'emotion'] },
    { icon: 'üòó', category: 'emotions', keywords: ['kissing', 'face', 'kiss', 'emotion'] },
    { icon: '‚ò∫Ô∏è', category: 'emotions', keywords: ['smiling', 'face', 'smile', 'emotion'] },
    { icon: 'üòö', category: 'emotions', keywords: ['kissing', 'face', 'closed', 'eyes', 'emotion'] },
    { icon: 'üòô', category: 'emotions', keywords: ['kissing', 'face', 'smiling', 'eyes', 'emotion'] },
    { icon: 'üòã', category: 'emotions', keywords: ['face', 'savoring', 'food', 'emotion'] },
    { icon: 'üòõ', category: 'emotions', keywords: ['face', 'tongue', 'stuck', 'out', 'emotion'] },
    { icon: 'üòú', category: 'emotions', keywords: ['winking', 'face', 'tongue', 'emotion'] },
    { icon: 'ü§™', category: 'emotions', keywords: ['zany', 'face', 'crazy', 'emotion'] },
    { icon: 'üòù', category: 'emotions', keywords: ['squinting', 'face', 'tongue', 'emotion'] },
    { icon: 'ü§ë', category: 'emotions', keywords: ['money', 'mouth', 'face', 'emotion'] },
    { icon: 'ü§ó', category: 'emotions', keywords: ['hugging', 'face', 'hug', 'emotion'] },
    { icon: 'ü§≠', category: 'emotions', keywords: ['face', 'hand', 'over', 'mouth', 'emotion'] },
    { icon: 'ü§´', category: 'emotions', keywords: ['shushing', 'face', 'quiet', 'emotion'] },
    { icon: 'ü§î', category: 'emotions', keywords: ['thinking', 'face', 'think', 'emotion'] },
    { icon: 'ü§ê', category: 'emotions', keywords: ['zipper', 'mouth', 'face', 'emotion'] },
    { icon: 'ü§®', category: 'emotions', keywords: ['face', 'raised', 'eyebrow', 'emotion'] },
    { icon: 'üòê', category: 'emotions', keywords: ['neutral', 'face', 'neutral', 'emotion'] },
    { icon: 'üòë', category: 'emotions', keywords: ['expressionless', 'face', 'blank', 'emotion'] },
    { icon: 'üò∂', category: 'emotions', keywords: ['face', 'without', 'mouth', 'emotion'] },
    { icon: 'üòè', category: 'emotions', keywords: ['smirking', 'face', 'smirk', 'emotion'] },
    { icon: 'üòí', category: 'emotions', keywords: ['unamused', 'face', 'bored', 'emotion'] },
    { icon: 'üôÑ', category: 'emotions', keywords: ['face', 'rolling', 'eyes', 'emotion'] },
    { icon: 'üò¨', category: 'emotions', keywords: ['grimacing', 'face', 'grimace', 'emotion'] },
    { icon: 'ü§•', category: 'emotions', keywords: ['lying', 'face', 'lie', 'emotion'] },
    { icon: 'üòî', category: 'emotions', keywords: ['pensive', 'face', 'sad', 'emotion'] },
    { icon: 'üò™', category: 'emotions', keywords: ['sleepy', 'face', 'tired', 'emotion'] },
    { icon: 'ü§§', category: 'emotions', keywords: ['drooling', 'face', 'drool', 'emotion'] },
    { icon: 'üò¥', category: 'emotions', keywords: ['sleeping', 'face', 'sleep', 'emotion'] },
    { icon: 'üò∑', category: 'emotions', keywords: ['face', 'medical', 'mask', 'emotion'] },
    { icon: 'ü§í', category: 'emotions', keywords: ['face', 'thermometer', 'sick', 'emotion'] },
    { icon: 'ü§ï', category: 'emotions', keywords: ['face', 'bandage', 'hurt', 'emotion'] },
    { icon: 'ü§¢', category: 'emotions', keywords: ['nauseated', 'face', 'sick', 'emotion'] },
    { icon: 'ü§Æ', category: 'emotions', keywords: ['face', 'vomiting', 'sick', 'emotion'] },
    { icon: 'ü§ß', category: 'emotions', keywords: ['sneezing', 'face', 'sneeze', 'emotion'] },
    { icon: 'ü•µ', category: 'emotions', keywords: ['hot', 'face', 'hot', 'emotion'] },
    { icon: 'ü•∂', category: 'emotions', keywords: ['cold', 'face', 'cold', 'emotion'] },
    { icon: 'ü•¥', category: 'emotions', keywords: ['woozy', 'face', 'dizzy', 'emotion'] },
    { icon: 'üòµ', category: 'emotions', keywords: ['knocked', 'out', 'face', 'emotion'] },
    { icon: 'ü§Ø', category: 'emotions', keywords: ['exploding', 'head', 'mind', 'emotion'] },
    { icon: 'ü§†', category: 'emotions', keywords: ['cowboy', 'hat', 'face', 'emotion'] },
    { icon: 'ü•≥', category: 'emotions', keywords: ['partying', 'face', 'party', 'emotion'] },
    { icon: 'ü•∏', category: 'emotions', keywords: ['disguised', 'face', 'disguise', 'emotion'] },
    { icon: 'üòé', category: 'emotions', keywords: ['smiling', 'face', 'sunglasses', 'emotion'] },
    { icon: 'ü§ì', category: 'emotions', keywords: ['nerd', 'face', 'nerd', 'emotion'] },
    { icon: 'üßê', category: 'emotions', keywords: ['face', 'monocle', 'monocle', 'emotion'] },
    { icon: 'üòï', category: 'emotions', keywords: ['confused', 'face', 'confused', 'emotion'] },
    { icon: 'üòü', category: 'emotions', keywords: ['worried', 'face', 'worried', 'emotion'] },
    { icon: 'üôÅ', category: 'emotions', keywords: ['slightly', 'frowning', 'face', 'emotion'] },
    { icon: '‚òπÔ∏è', category: 'emotions', keywords: ['frowning', 'face', 'sad', 'emotion'] },
    { icon: 'üòÆ', category: 'emotions', keywords: ['face', 'open', 'mouth', 'emotion'] },
    { icon: 'üòØ', category: 'emotions', keywords: ['hushed', 'face', 'surprised', 'emotion'] },
    { icon: 'üò≤', category: 'emotions', keywords: ['astonished', 'face', 'shocked', 'emotion'] },
    { icon: 'üò≥', category: 'emotions', keywords: ['flushed', 'face', 'embarrassed', 'emotion'] },
    { icon: 'ü•∫', category: 'emotions', keywords: ['pleading', 'face', 'plead', 'emotion'] },
    { icon: 'üò¶', category: 'emotions', keywords: ['frowning', 'face', 'open', 'mouth', 'emotion'] },
    { icon: 'üòß', category: 'emotions', keywords: ['anguished', 'face', 'pain', 'emotion'] },
    { icon: 'üò®', category: 'emotions', keywords: ['fearful', 'face', 'scared', 'emotion'] },
    { icon: 'üò∞', category: 'emotions', keywords: ['anxious', 'face', 'sweat', 'emotion'] },
    { icon: 'üò•', category: 'emotions', keywords: ['sad', 'relieved', 'face', 'emotion'] },
    { icon: 'üò¢', category: 'emotions', keywords: ['crying', 'face', 'cry', 'emotion'] },
    { icon: 'üò≠', category: 'emotions', keywords: ['loudly', 'crying', 'face', 'emotion'] },
    { icon: 'üò±', category: 'emotions', keywords: ['face', 'screaming', 'fear', 'emotion'] },
    { icon: 'üòñ', category: 'emotions', keywords: ['confounded', 'face', 'confused', 'emotion'] },
    { icon: 'üò£', category: 'emotions', keywords: ['persevering', 'face', 'struggle', 'emotion'] },
    { icon: 'üòû', category: 'emotions', keywords: ['disappointed', 'face', 'sad', 'emotion'] },
    { icon: 'üòì', category: 'emotions', keywords: ['downcast', 'face', 'sweat', 'emotion'] },
    { icon: 'üò©', category: 'emotions', keywords: ['weary', 'face', 'tired', 'emotion'] },
    { icon: 'üò´', category: 'emotions', keywords: ['tired', 'face', 'exhausted', 'emotion'] },
    { icon: 'ü•±', category: 'emotions', keywords: ['yawning', 'face', 'yawn', 'emotion'] },
    { icon: 'üò§', category: 'emotions', keywords: ['face', 'steam', 'nose', 'emotion'] },
    { icon: 'üò°', category: 'emotions', keywords: ['pouting', 'face', 'angry', 'emotion'] },
    { icon: 'üò†', category: 'emotions', keywords: ['angry', 'face', 'mad', 'emotion'] },
    { icon: 'ü§¨', category: 'emotions', keywords: ['face', 'symbols', 'mouth', 'emotion'] },
    { icon: 'üòà', category: 'emotions', keywords: ['smiling', 'face', 'horns', 'emotion'] },
    { icon: 'üëø', category: 'emotions', keywords: ['angry', 'face', 'horns', 'emotion'] },
    { icon: 'üíÄ', category: 'emotions', keywords: ['skull', 'death', 'dead', 'emotion'] },
    { icon: '‚ò†Ô∏è', category: 'emotions', keywords: ['skull', 'crossbones', 'death', 'emotion'] },
    { icon: 'üí©', category: 'emotions', keywords: ['pile', 'poo', 'poop', 'emotion'] },
    { icon: 'ü§°', category: 'emotions', keywords: ['clown', 'face', 'clown', 'emotion'] },
    { icon: 'üëπ', category: 'emotions', keywords: ['ogre', 'monster', 'japanese', 'emotion'] },
    { icon: 'üë∫', category: 'emotions', keywords: ['goblin', 'monster', 'japanese', 'emotion'] },
    { icon: 'üëª', category: 'emotions', keywords: ['ghost', 'spooky', 'halloween', 'emotion'] },
    { icon: 'üëΩ', category: 'emotions', keywords: ['alien', 'monster', 'ufo', 'emotion'] },
    { icon: 'üëæ', category: 'emotions', keywords: ['alien', 'monster', 'video', 'emotion'] },
    { icon: 'ü§ñ', category: 'emotions', keywords: ['robot', 'face', 'robot', 'emotion'] },
    { icon: 'üò∫', category: 'emotions', keywords: ['grinning', 'cat', 'face', 'emotion'] },
    { icon: 'üò∏', category: 'emotions', keywords: ['grinning', 'cat', 'smiling', 'eyes', 'emotion'] },
    { icon: 'üòπ', category: 'emotions', keywords: ['cat', 'face', 'tears', 'joy', 'emotion'] },
    { icon: 'üòª', category: 'emotions', keywords: ['smiling', 'cat', 'heart', 'eyes', 'emotion'] },
    { icon: 'üòº', category: 'emotions', keywords: ['cat', 'wry', 'smile', 'emotion'] },
    { icon: 'üòΩ', category: 'emotions', keywords: ['kissing', 'cat', 'face', 'emotion'] },
    { icon: 'üôÄ', category: 'emotions', keywords: ['weary', 'cat', 'face', 'emotion'] },
    { icon: 'üòø', category: 'emotions', keywords: ['crying', 'cat', 'face', 'emotion'] },
    { icon: 'üòæ', category: 'emotions', keywords: ['pouting', 'cat', 'face', 'emotion'] },
    { icon: 'üôà', category: 'emotions', keywords: ['see', 'no', 'evil', 'monkey', 'emotion'] },
    { icon: 'üôâ', category: 'emotions', keywords: ['hear', 'no', 'evil', 'monkey', 'emotion'] },
    { icon: 'üôä', category: 'emotions', keywords: ['speak', 'no', 'evil', 'monkey', 'emotion'] },
  ]

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredIcons = iconsWithCategories.filter(item => {
    if (iconSearchQuery === '') return true
    
    const query = iconSearchQuery.toLowerCase()
    return item.keywords.some(keyword => keyword.includes(query)) ||
           item.category.includes(query) ||
           item.icon.includes(query)
  }).map(item => item.icon)

  const handleActivityToggle = (activityId: string) => {
    setSelectedActivities(prev => 
      prev.includes(activityId) 
        ? prev.filter(id => id !== activityId)
        : [...prev, activityId]
    )
  }

  const handleNext = () => {
    setAnswer('selectedActivities', selectedActivities)
    router.push('/procedures/1')
  }

  const handlePromptSubmit = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
    console.log('Prompt text:', promptText)
    console.log('Selected templates:', selectedTemplates)
    setIsPromptModalOpen(false)
    setPromptText('')
    setSelectedTemplates([])
  }

  const handleTemplateSelect = (templateId: string) => {
    setSelectedTemplates(prev => 
      prev.includes(templateId)
        ? prev.filter(id => id !== templateId)
        : [...prev, templateId]
    )
  }


  const handleNewActivityChange = (field: string, value: string) => {
    setNewActivity(prev => ({
      ...prev,
      [field]: value
    }))
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (activityErrors[field as keyof typeof activityErrors]) {
      setActivityErrors(prev => ({
        ...prev,
        [field]: ''
      }))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleNewCategoryChange = (field: string, value: string) => {
    setNewCategory(prev => ({
      ...prev,
      [field]: value
    }))
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
  const handleCreateActivity = () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    const errors = {
      name: !newActivity.name ? 'Name is required' : '',
      category: !newActivity.category ? 'Category is required' : '',
      color: !newActivity.color ? 'Color is required' : '',
      icon: !newActivity.icon ? 'Icon is required' : ''
    }
    
    setActivityErrors(errors)
    
    if (!newActivity.name || !newActivity.category || !newActivity.color || !newActivity.icon) {
      console.log('Missing required fields:', newActivity)
      return
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    const newActivityData = {
      id: `custom-${Date.now()}`,
      name: newActivity.name,
      icon: newActivity.icon,
      color: newActivity.color, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ bg-[]
      bgColor: `rgba(${hexToRgb(newActivity.color).join(',')},0.2)`, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ RGBA —Å—Ç—Ä–æ–∫—É
      aiRecommended: false,
      note: newActivity.note
    }
    
    console.log('Creating activity with color:', newActivity.color, 'bgColor:', newActivityData.bgColor)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categoryMapping: { [key: string]: string } = {
      'Skin': 'skin',
      'Hair': 'hair', 
      'Physical health': 'physical',
      'Mental Wellness': 'mental'
    }
    
    // –î–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const categoryKey = categoryMapping[newActivity.category] || 
      newActivity.category.toLowerCase().replace(/\s+/g, '')
    
    console.log('Creating activity:', newActivityData, 'in category:', categoryKey)
    
    setActivities(prev => {
      const newState = {
        ...prev,
        [categoryKey]: [...((prev as any)[categoryKey] || []), newActivityData]
      }
      console.log('New activities state:', newState)
      return newState
    })

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—à–∏–±–∫–∏
    setNewActivity({
      name: '',
      note: '',
      category: '',
      color: '',
      icon: ''
    })
    
    setActivityErrors({
      name: '',
      category: '',
      color: '',
      icon: ''
    })

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setIsCreateActivityModalOpen(false)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCreateCategory = () => {
    if (!newCategory.name || !newCategory.color || !newCategory.icon) {
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫
    setCategories(prev => [...prev, newCategory.name])

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ activities
    const categoryKey = newCategory.name.toLowerCase().replace(/\s+/g, '')
    setActivities(prev => ({
      ...prev,
      [categoryKey]: []
    }))

    console.log('Created new category:', newCategory.name, 'with key:', categoryKey)

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    setNewActivity(prev => ({
      ...prev,
      category: newCategory.name
    }))

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setNewCategory({
      name: '',
      color: '',
      icon: ''
    })

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    setIsCreateCategoryModalOpen(false)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HEX –≤ RGB
  const hexToRgb = (hex: string) => {
    console.log('Converting hex to RGB:', hex)
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
    const rgb = result ? [
      parseInt(result[1], 16),
      parseInt(result[2], 16),
      parseInt(result[3], 16)
    ] : [0, 0, 0]
    console.log('RGB result:', rgb)
    return rgb
  }

  const getColorFromPosition = (e: React.MouseEvent) => {
    const rect = e.currentTarget.getBoundingClientRect()
    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const x = e.clientX - rect.left - centerX
    const y = e.clientY - rect.top - centerY
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    const distance = Math.sqrt(x * x + y * y)
    const maxRadius = rect.width / 2 - 32 // –£—á–∏—Ç—ã–≤–∞–µ–º –±–µ–ª—ã–π —Ü–µ–Ω—Ç—Ä
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –±–µ–ª–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç
    if (distance < 32) return null
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)
    const saturation = Math.min(distance / maxRadius, 1)
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª (–Ω–∞—á–∏–Ω–∞–µ–º —Å 0 –≥—Ä–∞–¥—É—Å–æ–≤ –≤–≤–µ—Ä—Ö—É)
    const angle = (Math.atan2(y, x) * (180 / Math.PI) + 90 + 360) % 360
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSL
    const hue = angle
    const lightness = 0.5 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å –¥–ª—è —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
    
    return `hsl(${hue}, ${Math.round(saturation * 100)}%, ${Math.round(lightness * 100)}%)`
  }

  const handleColorPickerMouseDown = (e: React.MouseEvent) => {
    setIsDragging(true)
    const color = getColorFromPosition(e)
    if (color) {
      handleNewActivityChange('color', color)
    }
  }

  const handleColorPickerMouseMove = (e: React.MouseEvent) => {
    if (isDragging) {
      const color = getColorFromPosition(e)
      if (color) {
        handleNewActivityChange('color', color)
      }
    }
  }

  const handleColorPickerClick = (e: React.MouseEvent) => {
    const color = getColorFromPosition(e)
    if (color) {
      handleColorSelect(color)
    }
  }

  const handleColorPickerMouseUp = () => {
    setIsDragging(false)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HSL –≤ HEX
  const hslToHex = (hsl: string) => {
    if (!hsl.startsWith('hsl')) return hsl
    
    const matches = hsl.match(/hsl\((\d+),\s*(\d+)%,\s*(\d+)%\)/)
    if (!matches) return hsl
    
    const h = parseInt(matches[1]) / 360
    const s = parseInt(matches[2]) / 100
    const l = parseInt(matches[3]) / 100
    
    const hue2rgb = (p: number, q: number, t: number) => {
      if (t < 0) t += 1
      if (t > 1) t -= 1
      if (t < 1/6) return p + (q - p) * 6 * t
      if (t < 1/2) return q
      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6
      return p
    }
    
    let r, g, b
    if (s === 0) {
      r = g = b = l
    } else {
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s
      const p = 2 * l - q
      r = hue2rgb(p, q, h + 1/3)
      g = hue2rgb(p, q, h)
      b = hue2rgb(p, q, h - 1/3)
    }
    
    const toHex = (c: number) => {
      const hex = Math.round(c * 255).toString(16)
      return hex.length === 1 ? '0' + hex : hex
    }
    
    return `#${toHex(r)}${toHex(g)}${toHex(b)}`
  }

  const handleColorSelect = (color: string) => {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HSL –≤ HEX –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const hexColor = hslToHex(color)
    if (isCreateCategoryModalOpen) {
      handleNewCategoryChange('color', hexColor)
    } else {
      handleNewActivityChange('color', hexColor)
    }
    // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–∂–º–µ—Ç Done
  }


  const handleIconPickerOpen = () => {
    setIsIconPickerOpen(true)
    setIconSearchQuery('') // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  }

  // –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  const categoryDisplayNames: Record<string, string> = {
    'skin': 'Skin',
    'hair': 'Hair',
    'physical': 'Physical health',
    'mental': 'Mental Wellness',
    // –î–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
  }

  // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π filteredActivities –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const filteredActivities = Object.keys(activities).reduce((acc, categoryKey) => {
    acc[categoryKey] = ((activities as any)[categoryKey] || []).filter((activity: any) => 
      activity.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
    return acc
  }, {} as Record<string, any[]>)

  return (
    <div className="min-h-screen bg-[#F5F5F5] flex justify-center">
      <div className="w-11/12 max-w-xl">
      {/* Header */}
        <div className="flex items-center justify-between px-6 py-3">
          <button 
            onClick={() => router.back()}
            className="w-7 h-7 flex items-center justify-center"
          >
            <span className="text-black text-xl">‚Äπ</span>
          </button>
          <h1 className="text-2xl font-bold text-[#5C4688]">Choose Activities</h1>
          <button 
            onClick={() => setIsCreateActivityModalOpen(true)}
            className="w-10 h-10 bg-white border-2 border-[#A385E9] rounded-full flex items-center justify-center hover:bg-[#A385E9] hover:text-white transition-all duration-200 shadow-sm"
          >
            <span className="text-[#A385E9] text-xl font-medium">+</span>
          </button>
        </div>

        {/* Search Bar */}
        <div className="px-6 py-4">
          <div className="flex gap-3">
            <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-6 w-6 text-[#969AB7]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            type="text"
                placeholder="Type something"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full h-[70px] pl-10 pr-4 bg-white border border-[#969AB7] rounded-lg text-gray-900 placeholder-[#969AB7] focus:outline-none focus:ring-2 focus:ring-purple-500"
          />
            </div>
          <button
              onClick={() => setIsPromptModalOpen(true)}
              className="px-6 py-3 bg-[#A385E9] text-white rounded-lg font-medium hover:bg-[#906fe2] transition-colors whitespace-nowrap"
          >
              Use prompt
          </button>
          </div>
        </div>

             {/* Activities List */}
             <div className="flex-1 px-6 pb-24">
               {/* Dynamic Categories */}
               {Object.entries(filteredActivities).map(([categoryKey, activitiesList]) => {
                 if (activitiesList.length === 0) return null
                 
                 const displayName = categoryDisplayNames[categoryKey] || 
                   categoryKey.charAt(0).toUpperCase() + categoryKey.slice(1)
                 
                 return (
                   <div key={categoryKey} className="mb-6">
                     <h3 className="text-sm text-[#969AB7] mb-3">{displayName}</h3>
                     <div className="space-y-3">
                       {activitiesList.map((activity) => (
                         <button
                           key={activity.id}
                           onClick={() => handleActivityToggle(activity.id)}
                           className={`w-full flex items-center px-3 py-3 rounded-full transition-colors ${
                             selectedActivities.includes(activity.id) 
                               ? 'hover:opacity-80' 
                               : 'hover:opacity-80 opacity-50'
                           }`}
                           style={{ 
                             backgroundColor: extractRgbaFromClass(activity.bgColor)
                           }}
                         >
                           <ActivityIcon icon={activity.icon} color={activity.color} />
                           <div className="ml-3 flex-1 text-left">
                             <div className="text-[#5C4688] font-medium text-base">{activity.name}</div>
                             {activity.aiRecommended && (
                               <div className="text-xs font-medium bg-gradient-to-r from-purple-600 via-pink-500 to-purple-700 bg-clip-text text-transparent">
                                 AI recommendation for you
                               </div>
                             )}
                           </div>
                           {selectedActivities.includes(activity.id) && (
                             <div className="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                               <span className="text-white text-sm">‚úì</span>
                             </div>
                           )}
                         </button>
                       ))}
                     </div>
                   </div>
                 )
               })}
             </div>

             {/* Next Button */}
             <div className="fixed bottom-0 left-0 right-0 p-6 bg-[#F5F5F5]">
               <div className="w-11/12 max-w-xl mx-auto">
        <button
          onClick={handleNext}
          disabled={selectedActivities.length === 0}
                   className={`w-full py-4 rounded-xl font-semibold text-sm transition-colors ${
                     selectedActivities.length > 0
                       ? 'bg-[#A385E9] text-white hover:bg-[#906fe2]'
                       : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                   }`}
        >
          Next
        </button>
      </div>
        </div>
      </div>

      {/* Prompt Modal */}
      {isPromptModalOpen && (
        <div className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-8 w-full max-w-lg shadow-2xl border border-gray-100">
            <div className="flex justify-between items-center mb-6">
              <div>
                <h2 className="text-2xl font-bold text-[#5C4688]">Create Custom Schedule</h2>
                <div className="w-16 h-1 bg-gradient-to-r from-[#A385E9] to-[#906fe2] rounded-full mt-2"></div>
              </div>
              <button
                onClick={() => setIsPromptModalOpen(false)}
                className="w-10 h-10 rounded-full hover:bg-gray-100 flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
        </button>
      </div>

            <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-4 mb-6 border border-purple-100">
              <p className="text-gray-700 text-sm leading-relaxed">
                Describe what procedures and how often you want to do, and we'll create a personalized schedule for you, or choose from our ready-made templates.
              </p>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-semibold text-gray-800 mb-3">
                Describe your ideal routine:
              </label>
              <div className="relative">
                <textarea
                  value={promptText}
                  onChange={(e) => setPromptText(e.target.value)}
                  placeholder="e.g., I want to do morning skincare routine with cleansing and moisturizing, evening routine with exfoliation twice a week, and yoga 3 times a week..."
                  className="w-full h-28 p-4 border-2 border-gray-200 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-[#A385E9] focus:border-transparent transition-all duration-200 placeholder-gray-400 scrollbar-hide text-gray-900"
                />
                <div className="absolute bottom-3 right-3 text-xs text-gray-400 bg-white px-2 py-1 rounded">
                  {promptText.length}/500
                </div>
              </div>
            </div>

            <div className="mb-8">
              <label className="block text-sm font-semibold text-gray-800 mb-3">
                Or choose from templates (multiple selection):
              </label>
              <div className="grid grid-cols-2 gap-2 max-h-48 overflow-y-auto scrollbar-hide">
                {templates.map((template) => (
                  <button
                    key={template.id}
                    onClick={() => handleTemplateSelect(template.id)}
                    className={`p-3 text-left border rounded-lg transition-all duration-200 ${
                      selectedTemplates.includes(template.id)
                        ? 'border-[#A385E9] bg-purple-50'
                        : 'border-gray-200 hover:border-purple-300 hover:bg-gray-50'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="font-medium text-gray-900 text-xs truncate">{template.name}</div>
                        <div className="text-xs text-gray-600 mt-1 line-clamp-2">{template.description}</div>
                      </div>
                      {selectedTemplates.includes(template.id) && (
                        <div className="w-4 h-4 bg-[#A385E9] rounded-full flex items-center justify-center ml-2 flex-shrink-0">
                          <svg className="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        </div>
                      )}
                    </div>
                  </button>
                ))}
              </div>
              {selectedTemplates.length > 0 && (
                <div className="mt-3 text-xs text-gray-600">
                  Selected: {selectedTemplates.length} template{selectedTemplates.length !== 1 ? 's' : ''}
                </div>
              )}
            </div>

            <div className="flex gap-4">
              <button
                onClick={() => setIsPromptModalOpen(false)}
                className="flex-1 px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 hover:border-gray-400 transition-all duration-200 font-medium"
              >
                Cancel
              </button>
              <button
                onClick={handlePromptSubmit}
                className="flex-1 px-6 py-3 bg-gradient-to-r from-[#A385E9] to-[#906fe2] text-white rounded-xl hover:from-[#906fe2] hover:to-[#7c5fb8] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl"
              >
                Create Schedule
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Create Activity Modal */}
      {isCreateActivityModalOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl p-6 w-full max-w-sm shadow-xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-[#5C4688]">Create New Activity</h2>
              <button
                onClick={() => setIsCreateActivityModalOpen(false)}
                className="w-8 h-8 rounded-full hover:bg-gray-100 flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              {/* Task name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Task name</label>
            <input
              type="text"
                  value={newActivity.name}
                  onChange={(e) => handleNewActivityChange('name', e.target.value)}
                  placeholder="Type the name"
                  className={`w-full p-2 border rounded-lg focus:outline-none focus:ring-1 focus:ring-[#A385E9] focus:border-transparent text-sm text-gray-900 ${
                    activityErrors.name ? 'border-red-500' : 'border-purple-200'
                  }`}
                />
                {activityErrors.name && (
                  <p className="text-red-500 text-xs mt-1">{activityErrors.name}</p>
                )}
              </div>

              {/* Note */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Note</label>
                <textarea
                  value={newActivity.note}
                  onChange={(e) => handleNewActivityChange('note', e.target.value)}
                  placeholder="Type the note here..."
                  className="w-full h-16 p-2 border border-purple-200 rounded-lg resize-none focus:outline-none focus:ring-1 focus:ring-[#A385E9] focus:border-transparent text-sm scrollbar-hide text-gray-900"
                />
              </div>

              {/* Category */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select
                  value={newActivity.category}
                  onChange={(e) => {
                    if (e.target.value === 'add-new-category') {
                      setIsCreateCategoryModalOpen(true)
                    } else {
                      handleNewActivityChange('category', e.target.value)
                    }
                  }}
                  className={`w-full p-2 border rounded-lg focus:outline-none focus:ring-1 focus:ring-[#A385E9] focus:border-transparent text-sm text-gray-900 bg-white ${
                    activityErrors.category ? 'border-red-500' : 'border-purple-200'
                  }`}
                >
                  <option value="" className="text-gray-500">Choose category</option>
                  {categories.map((category) => (
                    <option key={category} value={category} className="text-gray-900">{category}</option>
                  ))}
                  <option value="add-new-category" className="text-[#A385E9] font-medium">+ Add new category</option>
                </select>
                {activityErrors.category && (
                  <p className="text-red-500 text-xs mt-1">{activityErrors.category}</p>
                )}
              </div>

              {/* Color */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                <div className={`flex gap-1 p-2 border rounded-lg ${
                  activityErrors.color ? 'border-red-500' : 'border-purple-200'
                }`}>
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ */}
                  {colors.map((color) => {
                    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
                    const isSelected = newActivity.color === color.value
                    
                    return (
              <button
                        key={color.id}
                        onClick={() => handleNewActivityChange('color', color.value)}
                        className={`w-7 h-7 rounded-full border-2 transition-all duration-200 ${
                          isSelected
                            ? 'border-[#A385E9] scale-110 ring-2 ring-[#A385E9] ring-opacity-50 shadow-lg'
                            : 'border-gray-300 hover:scale-105 hover:border-gray-400'
                        }`}
                        style={{ backgroundColor: color.value }}
                      />
                    )
                  })}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö */}
                  {newActivity.color && !colors.some(c => c.value === newActivity.color) && (
                    <button
                      onClick={() => handleNewActivityChange('color', newActivity.color)}
                      className="w-7 h-7 rounded-full border-2 border-[#A385E9] scale-110 ring-2 ring-[#A385E9] ring-opacity-50 shadow-lg transition-all duration-200"
                      style={{ backgroundColor: newActivity.color }}
                      title="Selected color"
                    />
                  )}
                  <button
                    onClick={() => setIsColorPickerOpen(true)}
                    className="w-7 h-7 rounded-full border-2 border-dashed border-gray-400 flex items-center justify-center hover:border-[#A385E9] hover:bg-purple-50 transition-all duration-200"
                  >
                    <span className="text-gray-400 text-sm font-bold">+</span>
                  </button>
                </div>
                {activityErrors.color && (
                  <p className="text-red-500 text-xs mt-1">{activityErrors.color}</p>
                )}
              </div>

              {/* Icon */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                <div className={`flex gap-1 p-2 border rounded-lg ${
                  activityErrors.icon ? 'border-red-500' : 'border-purple-200'
                }`}>
                  {icons.map((icon) => (
                    <button
                      key={icon.id}
                      onClick={() => handleNewActivityChange('icon', icon.icon)}
                      className={`w-7 h-7 rounded-full flex items-center justify-center text-white text-lg transition-all duration-200 box-border ${
                        newActivity.icon === icon.icon
                          ? 'ring-2 ring-[#A385E9] ring-offset-1 scale-110'
                          : 'hover:scale-105'
                      }`}
                      style={{ 
                        backgroundColor: newActivity.color || '#A385E9' 
                      }}
                    >
                      {icon.icon}
                    </button>
                  ))}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö */}
                  {newActivity.icon && !icons.some(i => i.icon === newActivity.icon) && (
                    <button
                      onClick={() => handleNewActivityChange('icon', newActivity.icon)}
                      className="w-7 h-7 rounded-full flex items-center justify-center text-white text-lg transition-all duration-200 ring-2 ring-[#A385E9] ring-offset-1 scale-110 box-border"
                      style={{ 
                        backgroundColor: newActivity.color || '#A385E9' 
                      }}
                      title="Selected icon"
                    >
                      {newActivity.icon}
                    </button>
                  )}
                  
                  <button
                    onClick={handleIconPickerOpen}
                    className="w-7 h-7 rounded-full border-2 border-dashed border-gray-400 flex items-center justify-center hover:border-[#A385E9] hover:bg-purple-50 transition-all duration-200 box-border"
                  >
                    <span className="text-gray-400 text-sm font-bold">+</span>
                  </button>
                </div>
                {activityErrors.icon && (
                  <p className="text-red-500 text-xs mt-1">{activityErrors.icon}</p>
                )}
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setIsCreateActivityModalOpen(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateActivity}
                className="flex-1 px-4 py-2 bg-[#A385E9] text-white rounded-lg hover:bg-[#906fe2] transition-colors text-sm font-medium"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Color Picker Modal */}
      {isColorPickerOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[60] p-4">
          <div 
            className="bg-white rounded-3xl p-8 w-full max-w-md shadow-2xl"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-bold text-[#5C4688]">Choose Color</h3>
              <button
                onClick={() => setIsColorPickerOpen(false)}
                className="w-10 h-10 rounded-full hover:bg-gray-100 flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="flex justify-center mb-8">
              <div className="relative w-80 h-80">
                <div 
                  className="w-full h-full rounded-full cursor-crosshair relative overflow-hidden select-none"
                  style={{
                    background: 'conic-gradient(from 0deg, #ff0000, #ff8000, #ffff00, #80ff00, #00ff00, #00ff80, #00ffff, #0080ff, #0000ff, #8000ff, #ff00ff, #ff0080, #ff0000)'
                  }}
                  onMouseDown={handleColorPickerMouseDown}
                  onMouseMove={handleColorPickerMouseMove}
                  onMouseUp={handleColorPickerMouseUp}
                  onMouseLeave={handleColorPickerMouseUp}
                  onClick={handleColorPickerClick}
                >
                  {/* –ë–µ–ª—ã–π —Ü–µ–Ω—Ç—Ä */}
                  <div className="absolute inset-8 bg-white rounded-full"></div>
                  
                  {/* –ü—Ä–µ–≤—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
                  {newActivity.color && (
                    <div 
                      className="absolute w-16 h-16 rounded-full border-4 border-white shadow-lg pointer-events-none"
                      style={{
                        top: '50%',
                        left: '50%',
                        transform: 'translate(-50%, -50%)',
                        backgroundColor: newActivity.color
                      }}
                    />
                  )}
                </div>
              </div>
            </div>

            <div className="text-center">
              <button
                onClick={() => setIsColorPickerOpen(false)}
                className="px-8 py-3 bg-[#A385E9] text-white rounded-xl hover:bg-[#906fe2] transition-colors font-medium"
              >
                Done
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Icon Picker Modal */}
      {isIconPickerOpen && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[60] p-4">
          <div 
            className="bg-white rounded-3xl w-full max-w-4xl max-h-[80vh] shadow-2xl flex flex-col"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center p-8 pb-4">
              <h3 className="text-xl font-bold text-[#5C4688]">Choose Icon</h3>
              <button
                onClick={() => setIsIconPickerOpen(false)}
                className="w-10 h-10 rounded-full hover:bg-gray-100 flex items-center justify-center text-gray-500 hover:text-gray-700 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* –ü–æ–∏—Å–∫ –ø–æ –∏–∫–æ–Ω–∫–∞–º */}
            <div className="px-8 pb-4">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search icons..."
                  value={iconSearchQuery}
                  onChange={(e) => setIconSearchQuery(e.target.value)}
                  className="w-full px-4 py-3 pl-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#A385E9] focus:border-transparent text-gray-900 placeholder-gray-500"
                />
                <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                </div>
              </div>
            </div>

            <div className="flex-1 px-8 overflow-y-auto scrollbar-hide">
              <div className="grid grid-cols-8 gap-3">
                {filteredIcons.map((icon, index) => (
                  <button
                    key={index}
                onClick={() => {
                      if (isCreateCategoryModalOpen) {
                        handleNewCategoryChange('icon', icon)
                      } else {
                        handleNewActivityChange('icon', icon)
                      }
                    }}
                    className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-200 text-2xl ${
                      (isCreateCategoryModalOpen ? newCategory.icon : newActivity.icon) === icon
                        ? 'text-white ring-2 ring-[#A385E9] ring-offset-1 scale-105'
                        : 'hover:scale-105'
                    }`}
                    style={{ 
                      backgroundColor: (isCreateCategoryModalOpen ? newCategory.icon : newActivity.icon) === icon 
                        ? (isCreateCategoryModalOpen ? (newCategory.color || '#A385E9') : (newActivity.color || '#A385E9'))
                        : '#f3f4f6'
                    }}
                    title={icon}
                  >
                    {icon}
                  </button>
                ))}
              </div>
            </div>

            <div className="text-center p-8 pt-4">
              <button
                onClick={() => setIsIconPickerOpen(false)}
                className="px-8 py-3 bg-[#A385E9] text-white rounded-xl hover:bg-[#906fe2] transition-colors font-medium"
              >
                Done
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {isCreateCategoryModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-6 w-full max-w-md mx-4 max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold text-[#5C4688] mb-6 text-center">Create New Category</h2>
            
            <div className="space-y-4">
              {/* Category Name */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Category name</label>
                <input
                  type="text"
                  value={newCategory.name}
                  onChange={(e) => handleNewCategoryChange('name', e.target.value)}
                  placeholder="Type the name"
                  className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-1 focus:ring-[#A385E9] focus:border-transparent text-sm text-gray-900"
                />
              </div>

              {/* Color */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                <div className="flex gap-1 p-2 border border-purple-200 rounded-lg">
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ */}
                  {colors.map((color) => {
                    // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
                    const isSelected = newCategory.color === color.value
                    
                    return (
              <button
                        key={color.id}
                        onClick={() => handleNewCategoryChange('color', color.value)}
                        className={`w-7 h-7 rounded-full border-2 transition-all duration-200 ${
                          isSelected
                            ? 'border-[#A385E9] scale-110 ring-2 ring-[#A385E9] ring-opacity-50 shadow-lg'
                            : 'border-gray-300 hover:scale-105 hover:border-gray-400'
                        }`}
                        style={{ backgroundColor: color.value }}
                      />
                    )
                  })}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö */}
                  {newCategory.color && !colors.some(c => c.value === newCategory.color) && (
                    <button
                      onClick={() => handleNewCategoryChange('color', newCategory.color)}
                      className="w-7 h-7 rounded-full border-2 border-[#A385E9] scale-110 ring-2 ring-[#A385E9] ring-opacity-50 shadow-lg transition-all duration-200"
                      style={{ backgroundColor: newCategory.color }}
                      title="Selected color"
                    />
                  )}
                  <button
                    onClick={() => setIsColorPickerOpen(true)}
                    className="w-7 h-7 rounded-full border-2 border-dashed border-gray-400 flex items-center justify-center hover:border-[#A385E9] hover:bg-purple-50 transition-all duration-200"
                  >
                    <span className="text-gray-400 text-sm font-bold">+</span>
                  </button>
                </div>
              </div>

              {/* Icon */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Icon</label>
                <div className="flex gap-1 p-2 border border-purple-200 rounded-lg">
                  {icons.map((icon) => (
                    <button
                      key={icon.id}
                      onClick={() => handleNewCategoryChange('icon', icon.icon)}
                      className={`w-7 h-7 rounded-full flex items-center justify-center text-white text-lg transition-all duration-200 box-border ${
                        newCategory.icon === icon.icon
                          ? 'ring-2 ring-[#A385E9] ring-offset-1 scale-110'
                          : 'hover:scale-105'
                      }`}
                      style={{ 
                        backgroundColor: newCategory.color || '#A385E9' 
                      }}
                    >
                      {icon.icon}
                    </button>
                  ))}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö */}
                  {newCategory.icon && !icons.some(i => i.icon === newCategory.icon) && (
                    <button
                      onClick={() => handleNewCategoryChange('icon', newCategory.icon)}
                      className="w-7 h-7 rounded-full flex items-center justify-center text-white text-lg transition-all duration-200 ring-2 ring-[#A385E9] ring-offset-1 scale-110 box-border"
                      style={{ 
                        backgroundColor: newCategory.color || '#A385E9' 
                      }}
                      title="Selected icon"
                    >
                      {newCategory.icon}
                    </button>
                  )}
                  
                  <button
                    onClick={handleIconPickerOpen}
                    className="w-7 h-7 rounded-full border-2 border-dashed border-gray-400 flex items-center justify-center hover:border-[#A385E9] hover:bg-purple-50 transition-all duration-200 box-border"
                  >
                    <span className="text-gray-400 text-sm font-bold">+</span>
                  </button>
                </div>
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setIsCreateCategoryModalOpen(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleCreateCategory}
                disabled={!newCategory.name || !newCategory.color || !newCategory.icon}
                className="flex-1 px-4 py-2 bg-[#A385E9] text-white rounded-lg hover:bg-[#8B6BC2] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Create
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}