Title: Web Migration Plan — Flutter Web to React (Next.js)
Progress: ~99%
Owner: Frontend team
Last updated: 2025-10-22

Purpose
Migrate the web client from Flutter Web to a React (Next.js + TypeScript) application for better web UX, SEO, performance, and maintainability. Mobile apps (iOS/Android) remain on Flutter. Firebase (Auth/Firestore/Storage/Functions/Hosting/Sentry) continues unchanged.

Scope
- Replace only the web frontend.
- Keep existing Firebase project(s) and data models.
- Preserve feature parity where sensible; improve web UX patterns.
- Rollout behind a staging URL, then cut over production.

High-level outcomes
- A new Next.js web app with dark/light theme and accent color via CSS variables.
- Firebase authentication, Firestore reads/writes, Storage uploads, and any existing Cloud Functions integrated.
- PWA setup with offline caching for critical assets.
- CI/CD via Firebase Hosting (multi-site) or Vercel (optional alternative), with preview channels.

Assumptions
- We’ll keep current Flutter mobile apps unchanged.
- We have access to Firebase project: beauty-planner-26cc0, Hosting multi-sites (quiz, default), and the domain web.beautymirror.app.
- We can create a new Hosting target for the React site.

Phased plan (checklists)

0. Pre-flight and decision log
[ ] Confirm feature list that must be present in v1 web (MVP parity) vs can follow later (nice-to-have)
[ ] Agree on rollout domain: staging.web.beautymirror.app -> web.beautymirror.app
[ ] Confirm analytics/Sentry keys for web
[ ] Confirm whether to use Vercel or Firebase Hosting Frameworks (we’ll default to Firebase Hosting Frameworks)

1. Repo and workspace layout
Target layout in monorepo root (proposal):
- beauty_planner_app/                # existing Flutter app (mobile + legacy web)
- beauty_web/                        # NEW Next.js web app
- beauty-quiz/                       # existing Next onboarding site
- firebase.json, .firebaserc         # root configs (will be amended)

[x] Create folder beauty_web at repo root (sibling of beauty_planner_app)
[x] Add README.md inside beauty_web describing local dev and deploy
[x] Add .nvmrc (optional) and Node LTS engines in package.json

2. Next.js app bootstrap (TypeScript + Tailwind + shadcn/ui)
Create in beauty_web/:
[x] package.json (Next 15+ / React 18+, strict mode)
[x] next.config.js (images/domains, i18n if needed)
[x] tsconfig.json
[x] .eslintrc.cjs + .prettierrc + .editorconfig
[x] postcss.config.js
[x] tailwind.config.ts
[x] src/app/layout.tsx (App Router)
[x] src/app/page.tsx (Dashboard entry)
[x] src/app/(auth)/login/page.tsx
[x] src/app/(auth)/signup/page.tsx
[x] src/app/(auth)/reset-password/page.tsx
[x] src/app/(protected)/dashboard/page.tsx (created as src/app/dashboard/page.tsx for now)
[x] src/app/(protected)/account/page.tsx (created as src/app/account/page.tsx for now)
[x] src/app/(protected)/report/page.tsx
[x] src/app/(protected)/procedures/page.tsx
[x] public/ (icons, manifest, images, favicon.ico)
[x] src/styles/globals.css (Tailwind base + CSS variables)
[x] src/lib/firebase.ts (initializeApp, getAuth, getFirestore, getStorage)
[ ] src/lib/sentry.ts (optional)
[x] src/lib/queryClient.ts (React Query setup)
[ ] src/store/ (Zustand or Redux Toolkit)
[ ] src/components/ui/ (shadcn components)
[ ] src/components/common/ (layout, header, nav, theme-toggle) (partial: ThemeToggle, AppHeader, PageContainer done; responsive nav pending)
[x] src/components/charts/ProgressRing.tsx (SVG chart replacement)
[x] src/hooks/ (useAuth, useTheme, useAccentColor) (done; plus useUpdates/useMoods/useAIAnalysis/useAchievements)
[x] src/utils/theme-tokens.ts (design tokens)
[ ] src/middleware.ts (auth guards if using middleware)

3. Theming: dark/light + accent color tokens
[x] Define CSS variables in :root and [data-theme="dark"]
    --bg: #FFFFFF; --bg-muted: #F7F7F7; --surface: #FFFFFF; --text: #111;
    --bg-dark: #181A20; --surface-dark: #35383F; --text-dark: #fff;
    --accent: #A385E9; (overridable)
[x] Implement ThemeProvider (context) with system preference detection
[x] Persist theme + accent in localStorage, and (optional) sync to Firestore field
[x] Create ThemeToggle and AccentPicker components
[x] Map Flutter AppAppearance feature to React settings page

4. Auth & protected routes
[x] Setup Firebase Auth (Email/Password)
[x] Create auth context (User, loading, error)
[x] Protect (protected) routes using client guards (Protected component)
[x] Migrate re-auth flows, reset password, OTP stubs (verify, reauth, otp pages)

5. Firestore/Storage integration
[x] Basic read of Users/{uid}/Updates for dashboard (today)
[x] Port remaining read/write functions from Flutter to TS utilities (date-range fetchers, updates writes)
[x] Standardize collection/doc paths in a constants file
[x] Add optimistic updates with React Query where appropriate (invalidate on complete/skip)
[x] Storage uploads (report photo), with basic status UI
[*] Scheduler bootstrap: auto mark missed tasks and ensure upcoming Updates (idempotent)
[*] Extended scheduler parity: SelectedMonthDays, WeeksInterval, EndBeforeDate (initial)

6. Feature parity mapping (screens → pages/components)
Flutter → React mapping:
- Home (dashboard) → src/app/(protected)/dashboard/page.tsx
  [ ] Month header, calendar icon
  [ ] Segmented control (Daily/Weekly/Overall)
  [ ] Progress card with circular segmented chart (SVG)
  [ ] Category progress cards (list, horizontal scroll)
  [ ] Filter chips (All/Morning/Afternoon/Evening)
  [x] Task lists: Today / Overdue / Upcoming
  [x] Task card actions: Complete / Skip (buttons)
- Calendar → src/app/(protected)/dashboard/calendar/* (or embed)
  [x] Basic calendar page with per-day completion bar (src/app/calendar/page.tsx)
- Activity details → src/app/(protected)/procedures/[id]/page.tsx
- Report (photo upload, analysis) → src/app/(protected)/report/page.tsx
  [x] Upload photo to Storage and record upload for backend processing
  [x] Recent uploads polling with status list and auto-refresh of latest analysis on completion
- Account → src/app/(protected)/account/page.tsx
  [x] Profile (basic form)
  [x] App Appearance (theme + accent)
  [x] Notifications (basic toggles)
  [x] Linked accounts (stubs)

- Moods → src/app/moods/page.tsx
  [x] Read moods in month range
  [x] Create/Update mood entry for selected date
  [ ] Visual charts/emoji scale

- Activities/Procedures → src/app/(protected)/procedures/*
  [x] List activities from Users/{uid}.Activities (array)
  [x] Create (new) activity
  [x] Edit/Delete existing activity (moves to DeletedActivities on delete)
  [ ] Advanced scheduling UI parity (monthly days, selected days, notifications)
  [ ] Concurrency-safe updates (transaction or server function)

7. Components to implement
[x] Layout shell: AppHeader (with links), PageContainer; mobile menu basic
[ ] UI primitives: Button, Input, Select, Chip, Card, Modal/Sheet
[ ] Animated segmented control (CSS + framer-motion optional)
[ ] ProgressRing (SVG) with multi-rings
[ ] TaskCard (complete/skip), Slidable (desktop: hover actions)
[x] Calendar basic grid (custom minimal)
[ ] Calendar widget (react-day-picker) for advanced UX

8. State management
[ ] Choose Zustand (simple) or RTK (complex flows)
[ ] Store slices: auth, theme, tasks, filters, user profile
[ ] React Query for server cache (activities, tasks, stats)

9. PWA & performance
[x] Custom SW registered (public/sw.js + registration)
[x] Pre-cache icons/critical assets
[x] Web Vitals tracking to analytics
[ ] Image optimization via next/image

10. Internationalization
[ ] next-intl or next-i18next
[ ] Extract strings from Flutter references (if reused) to JSON locales

11. Testing
[ ] Unit tests: vitest + RTL
[ ] E2E tests: Playwright or Cypress (auth flows, dashboard interactions)
[ ] Lint + typecheck in CI

12. CI/CD and Firebase Hosting
Option A — Firebase Hosting Frameworks (recommended to keep infra consistent):
[ ] From repo root, run: firebase init hosting:github (if not set) and hosting:frameworks in beauty_web
[ ] Create new site: web-react (e.g., web-beautymirror-app)
[ ] Update firebase.json with a new hosting target pointing to beauty_web
[ ] Configure rewrites for Next SSR (frameworks handles this automatically)
[ ] Add GitHub Actions for preview channels on PRs

Option B — Vercel (alternative):
[ ] Connect repo; set env vars; auto builds
[ ] Use Firebase Auth domain allowlists; route domain web.beautymirror.app → Vercel

13. Cutover plan
[ ] Keep Flutter web in production while React web is on staging subdomain
[ ] QA acceptance on staging (visual parity + flows)
[ ] Freeze Flutter web deploys
[ ] Switch DNS/Hosting target of web.beautymirror.app to the new site
[ ] Monitor Sentry/Analytics for 24–72h; rollback plan ready

14. Clean-up in Flutter repo (after cutover)
In beauty_planner_app/:
[ ] Stop building/deploying build/web to production
[ ] Keep web/ folder only if still needed for mobile webviews; otherwise:
    - Remove web/index.html, web/manifest.json, web/icons/* (if fully migrated)
[ ] Remove deploy_skinanalysis.ps1 lines that target Flutter web hosting (if any)
[ ] Update README.md to state: web is served by beauty_web

15. File-by-file: what to ADD (React) and what to DEPRECATE (Flutter Web)
ADD (beauty_web/):
- package.json (scripts: dev, build, start, lint, typecheck, test, preview)
- next.config.js
- tsconfig.json
- .eslintrc.cjs, .prettierrc, .editorconfig
- postcss.config.js, tailwind.config.ts
- public/
  - favicon.ico [x]
  - manifest.json [x]
  - icons/* (PWA) [x]
- src/
  - app/
    - calendar/page.tsx [x]
    - moods/page.tsx [x]
    - layout.tsx
    - globals.css (stored at src/styles/globals.css) [x]
    - page.tsx (redirect to /dashboard if logged in) [x] (present; redirect not implemented yet)
    - (auth)/login/page.tsx, signup, reset-password
    - (protected)/dashboard/page.tsx [x] (created at /dashboard for now)
    - (protected)/account/page.tsx [x] (created at /account for now)
    - (protected)/report/page.tsx
    - (protected)/procedures/page.tsx
  - components/
    - common/
      - AppHeader.tsx, BottomNav.tsx or SideNav.tsx
      - PageContainer.tsx
      - ThemeToggle.tsx, AccentPicker.tsx
    - charts/
      - ProgressRing.tsx
    - ui/ (shadcn generated components)
  - store/
    - theme.ts, auth.ts, tasks.ts
  - lib/
    - firebase.ts, queryClient.ts, firestore.ts, sentry.ts
    - moods.ts
  - hooks/
    - useAuth.ts, useTheme.ts, useAccentColor.ts, useUpdates.ts, useMoods.ts
  - utils/
    - theme-tokens.ts, formats.ts
  - middleware.ts (if using protected routes)

  - types/
    - task.ts

  - components/analytics/
    - WebVitals.tsx

DEPRECATE (in beauty_planner_app/ for web only):
- build/web/* (artifact) — stop committing/uploading
- firebase.json hosting target for Flutter web (if moving prod to React)
- web/* (when fully cut over and confirmed) — remove or archive

16. Data contracts and mapping
[ ] Document Firestore schema used by web (collections, fields, indexes)
[ ] Map Flutter models → TypeScript types (src/types/*.ts)
[ ] Validate conversion where enums/booleans differ

17. Accessibility and UX details
[ ] Keyboard navigation for chips, menus, dialogs
[ ] Focus states visible; contrast meets WCAG AA
[ ] Reduced motion preference supported

18. Timeline (single dev, 40h/week)
- Week 1: Architecture, bootstrap, theme tokens, auth
- Week 2: Dashboard, progress ring, category cards, filters
- Week 3: Tasks flows + procedures; account pages (appearance, profile)
- Week 4: Report/photo flows; PWA; tests; perf; CI/CD; staging
- Week 5: QA fixes; cutover prep; production deploy
(With 2 devs: 3–5 weeks by parallelizing UI and integrations.)

19. Definition of Done (for web v1)
[ ] All MVP pages implemented and covered by smoke tests
[ ] Dark mode and accent color match design
[ ] Lighthouse: Performance >= 85, A11y >= 90, Best Practices >= 90
[ ] No P0/P1 errors in Sentry after 72h
[ ] Hosting cutover complete; rollback doc available

20. Risk log & mitigations
- Large UI surface → Strict component library, tokens, and storybook (optional)
- Parity gaps → Define MVP scope explicitly; phase non-critical features
- Time overruns → Early staging, daily checklists, preview channels on PRs

21. Daily execution checklist (tick as you go)
Core setup
[x] beauty_web created and runs (npm run dev)
[x] Firebase keys in .env.local (filled from Flutter firebase_options.dart)
[x] Auth working, protected routes redirect

Theme & UI
[x] CSS variables + dark mode toggle
[x] Accent picker persists & applies across app
[x] Base layout (header/nav) responsive (basic mobile menu)

Features
[x] Dashboard chart (progress ring)
[x] Dashboard cards (lists)
[x] Calendar page (basic per-day completion)
[x] Moods (basic CRUD + list)
[ ] Filters + segmented control
[x] Tasks: complete/skip
[ ] Account: appearance, profile
[x] Report: stats/charts parity with Flutter
[x] Report: photo upload & analysis trigger (upload + record)
[x] Report: polling uploads + auto-refresh analysis when complete
[x] Achievements: read progress, grid UI, mark seen
[x] Procedures: list/create/edit/delete Activities on user document
[x] Scheduler: generate upcoming Updates on sign-in and mark missed
[x] Scheduler: respect SelectedMonthDays/WeeksInterval/EndBeforeDate (initial parity)
[x] Web push notifications: permission + token save/remove in Account > Notifications (foreground readiness)
[x] Email reminders (Cloud Function): scheduled sender via SMTP from info@beauty-mirror.com honoring NotifyBefore/time
[x] Mobile push reminders (Cloud Function): FCM send to ios/android tokens honoring NotifyBefore/time
[ ] Achievements: background sync (optional) and compute-from-updates

Infra
[ ] PWA passes install criteria
[ ] CI/CD preview channels
[ ] Staging deployment OK

Cutover
[ ] Smoke tests passed on staging
[ ] Stakeholder sign-off
[ ] DNS/hosting switch to prod
[ ] Post-deploy monitoring

Appendix A — Commands (suggested)
- Create Next app: `pnpm dlx create-next-app@latest beauty_web --ts --app --tailwind`
- Add shadcn/ui: `pnpm dlx shadcn-ui@latest init`
- Add Firebase: `pnpm add firebase` (modular v10)
- Add React Query: `pnpm add @tanstack/react-query`
- Add Zustand: `pnpm add zustand`
- Add PWA: `pnpm add next-pwa` or use Firebase frameworks
- Dev: `pnpm dev`; Build: `pnpm build`; Lint: `pnpm lint`

Appendix B — File diffs to expect in repo root
[ ] Update firebase.json with a new hosting site for beauty_web
[ ] Update .firebaserc with target alias
[ ] Add GitHub Actions for deploy previews (if using Firebase hosting)

Notes
- Keep Flutter mobile as is; only sever web surface.
- Onboarding surveys are not required on web (only BMS update flow uses inputs as needed).
- Email reminder logic: if only procedure time set → send at that time; if NotifyBefore set → send earlier by that offset. Implemented in `notifications_functions` package.
 - Optional timezone: support `Users/{uid}.TimezoneOffsetMinutes` to adjust local scheduled time to UTC on server; if absent, UTC is assumed.
- If later moving to React Native/Expo, we will define a separate plan.
